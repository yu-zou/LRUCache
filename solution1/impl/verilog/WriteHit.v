// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module WriteHit (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_addr_V,
        i_wdata_V,
        valid_V,
        tag_0_V_read,
        tag_1_V_read,
        tag_2_V_read,
        tag_3_V_read,
        dataArray_0_V_address0,
        dataArray_0_V_ce0,
        dataArray_0_V_we0,
        dataArray_0_V_d0,
        dataArray_1_V_address0,
        dataArray_1_V_ce0,
        dataArray_1_V_we0,
        dataArray_1_V_d0,
        dataArray_2_V_address0,
        dataArray_2_V_ce0,
        dataArray_2_V_we0,
        dataArray_2_V_d0,
        dataArray_3_V_address0,
        dataArray_3_V_ce0,
        dataArray_3_V_we0,
        dataArray_3_V_d0,
        mruArray_V_2_address0,
        mruArray_V_2_ce0,
        mruArray_V_2_we0,
        mruArray_V_2_d0,
        mruArray_V_2_q0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] i_addr_V;
input  [511:0] i_wdata_V;
input  [3:0] valid_V;
input  [27:0] tag_0_V_read;
input  [27:0] tag_1_V_read;
input  [27:0] tag_2_V_read;
input  [27:0] tag_3_V_read;
output  [3:0] dataArray_0_V_address0;
output   dataArray_0_V_ce0;
output   dataArray_0_V_we0;
output  [511:0] dataArray_0_V_d0;
output  [3:0] dataArray_1_V_address0;
output   dataArray_1_V_ce0;
output   dataArray_1_V_we0;
output  [511:0] dataArray_1_V_d0;
output  [3:0] dataArray_2_V_address0;
output   dataArray_2_V_ce0;
output   dataArray_2_V_we0;
output  [511:0] dataArray_2_V_d0;
output  [3:0] dataArray_3_V_address0;
output   dataArray_3_V_ce0;
output   dataArray_3_V_we0;
output  [511:0] dataArray_3_V_d0;
output  [3:0] mruArray_V_2_address0;
output   mruArray_V_2_ce0;
output   mruArray_V_2_we0;
output  [3:0] mruArray_V_2_d0;
input  [3:0] mruArray_V_2_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dataArray_0_V_ce0;
reg dataArray_0_V_we0;
reg dataArray_1_V_ce0;
reg dataArray_1_V_we0;
reg dataArray_2_V_ce0;
reg dataArray_2_V_we0;
reg dataArray_3_V_ce0;
reg dataArray_3_V_we0;
reg[3:0] mruArray_V_2_address0;
reg mruArray_V_2_ce0;
reg mruArray_V_2_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] indexReg_V_fu_191_p4;
reg   [3:0] indexReg_V_reg_423;
reg   [3:0] mruArray_V_1_addr_reg_431;
wire   [0:0] tmp_3_fu_220_p2;
reg   [0:0] tmp_3_reg_436;
wire   [0:0] tmp_13_1_fu_226_p2;
reg   [0:0] tmp_13_1_reg_441;
wire   [0:0] tmp_13_2_fu_232_p2;
reg   [0:0] tmp_13_2_reg_446;
wire   [0:0] tmp_13_3_fu_238_p2;
reg   [0:0] tmp_13_3_reg_451;
reg   [3:0] dataArray_0_V_addr_reg_456;
reg   [3:0] dataArray_1_V_addr_reg_461;
reg   [3:0] dataArray_2_V_addr_reg_466;
reg   [3:0] dataArray_3_V_addr_reg_471;
wire   [63:0] tmp_fu_211_p1;
wire    ap_CS_fsm_state2;
wire   [1:0] tmp_24_fu_370_p1;
wire   [0:0] tmp_s_fu_384_p2;
reg   [27:0] tagReg_V_fu_201_p4;
wire   [0:0] tmp_20_fu_244_p1;
wire   [0:0] tmp_21_fu_253_p3;
wire   [0:0] tmp_23_fu_274_p3;
wire   [0:0] or_cond_fu_248_p2;
wire   [0:0] or_cond6_fu_282_p2;
wire   [0:0] tmp_7_fu_295_p2;
wire   [2:0] p_cast_fu_287_p3;
wire   [0:0] or_cond4_fu_261_p2;
wire   [0:0] sel_tmp1_fu_309_p2;
wire   [0:0] sel_tmp6_demorgan_fu_321_p2;
wire   [0:0] sel_tmp6_fu_327_p2;
wire   [0:0] tmp9_fu_333_p2;
wire   [0:0] tmp_22_fu_266_p3;
wire   [0:0] sel_tmp7_fu_338_p2;
wire   [0:0] sel_tmp2_fu_315_p2;
wire   [0:0] tmp_8_fu_352_p2;
wire   [2:0] sel_tmp3_cast_fu_344_p3;
wire   [2:0] sel_tmp_fu_301_p3;
wire   [2:0] evictWay_lcssa_fu_358_p3;
wire   [31:0] evictWay_lcssa_cast_fu_366_p1;
reg   [3:0] p_Result_s_fu_374_p4;
wire   [0:0] tmp_17_3_fu_405_p2;
wire   [0:0] tmp_17_2_fu_400_p2;
wire   [0:0] tmp_17_1_fu_395_p2;
wire   [0:0] tmp_4_fu_390_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dataArray_0_V_addr_reg_456 <= tmp_fu_211_p1;
        dataArray_1_V_addr_reg_461 <= tmp_fu_211_p1;
        dataArray_2_V_addr_reg_466 <= tmp_fu_211_p1;
        dataArray_3_V_addr_reg_471 <= tmp_fu_211_p1;
        indexReg_V_reg_423 <= indexReg_V_fu_191_p4;
        mruArray_V_1_addr_reg_431 <= tmp_fu_211_p1;
        tmp_13_1_reg_441 <= tmp_13_1_fu_226_p2;
        tmp_13_2_reg_446 <= tmp_13_2_fu_232_p2;
        tmp_13_3_reg_451 <= tmp_13_3_fu_238_p2;
        tmp_3_reg_436 <= tmp_3_fu_220_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dataArray_0_V_ce0 = 1'b1;
    end else begin
        dataArray_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_24_fu_370_p1 == 2'd0))) begin
        dataArray_0_V_we0 = 1'b1;
    end else begin
        dataArray_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dataArray_1_V_ce0 = 1'b1;
    end else begin
        dataArray_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_24_fu_370_p1 == 2'd1))) begin
        dataArray_1_V_we0 = 1'b1;
    end else begin
        dataArray_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dataArray_2_V_ce0 = 1'b1;
    end else begin
        dataArray_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_24_fu_370_p1 == 2'd2))) begin
        dataArray_2_V_we0 = 1'b1;
    end else begin
        dataArray_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dataArray_3_V_ce0 = 1'b1;
    end else begin
        dataArray_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_24_fu_370_p1 == 2'd3))) begin
        dataArray_3_V_we0 = 1'b1;
    end else begin
        dataArray_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mruArray_V_2_address0 = mruArray_V_1_addr_reg_431;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        mruArray_V_2_address0 = tmp_fu_211_p1;
    end else begin
        mruArray_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        mruArray_V_2_ce0 = 1'b1;
    end else begin
        mruArray_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((tmp_s_fu_384_p2 == 1'd1) & (tmp_24_fu_370_p1 == 2'd3)) | ((tmp_s_fu_384_p2 == 1'd1) & (tmp_24_fu_370_p1 == 2'd2)) | ((tmp_s_fu_384_p2 == 1'd1) & (tmp_24_fu_370_p1 == 2'd1)) | ((tmp_s_fu_384_p2 == 1'd1) & (tmp_24_fu_370_p1 == 2'd0))))) begin
        mruArray_V_2_we0 = 1'b1;
    end else begin
        mruArray_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign dataArray_0_V_address0 = dataArray_0_V_addr_reg_456;

assign dataArray_0_V_d0 = i_wdata_V;

assign dataArray_1_V_address0 = dataArray_1_V_addr_reg_461;

assign dataArray_1_V_d0 = i_wdata_V;

assign dataArray_2_V_address0 = dataArray_2_V_addr_reg_466;

assign dataArray_2_V_d0 = i_wdata_V;

assign dataArray_3_V_address0 = dataArray_3_V_addr_reg_471;

assign dataArray_3_V_d0 = i_wdata_V;

assign evictWay_lcssa_cast_fu_366_p1 = evictWay_lcssa_fu_358_p3;

assign evictWay_lcssa_fu_358_p3 = ((tmp_8_fu_352_p2[0:0] === 1'b1) ? sel_tmp3_cast_fu_344_p3 : sel_tmp_fu_301_p3);

integer ap_tvar_int_0;

always @ (i_addr_V) begin
    for (ap_tvar_int_0 = 4 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 3 - 0) begin
            indexReg_V_fu_191_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            indexReg_V_fu_191_p4[ap_tvar_int_0] = i_addr_V[3 - ap_tvar_int_0];
        end
    end
end

assign mruArray_V_2_d0 = {{{{tmp_17_3_fu_405_p2}, {tmp_17_2_fu_400_p2}}, {tmp_17_1_fu_395_p2}}, {tmp_4_fu_390_p2}};

assign or_cond4_fu_261_p2 = (tmp_21_fu_253_p3 & tmp_13_1_reg_441);

assign or_cond6_fu_282_p2 = (tmp_23_fu_274_p3 & tmp_13_3_reg_451);

assign or_cond_fu_248_p2 = (tmp_3_reg_436 & tmp_20_fu_244_p1);

always @ (*) begin
    p_Result_s_fu_374_p4 = mruArray_V_2_q0;
    p_Result_s_fu_374_p4[evictWay_lcssa_cast_fu_366_p1] = |(4'd1);
end

assign p_cast_fu_287_p3 = ((or_cond_fu_248_p2[0:0] === 1'b1) ? 3'd0 : 3'd3);

assign sel_tmp1_fu_309_p2 = (or_cond_fu_248_p2 ^ 1'd1);

assign sel_tmp2_fu_315_p2 = (sel_tmp1_fu_309_p2 & or_cond4_fu_261_p2);

assign sel_tmp3_cast_fu_344_p3 = ((sel_tmp7_fu_338_p2[0:0] === 1'b1) ? 3'd2 : 3'd1);

assign sel_tmp6_demorgan_fu_321_p2 = (or_cond_fu_248_p2 | or_cond4_fu_261_p2);

assign sel_tmp6_fu_327_p2 = (sel_tmp6_demorgan_fu_321_p2 ^ 1'd1);

assign sel_tmp7_fu_338_p2 = (tmp_22_fu_266_p3 & tmp9_fu_333_p2);

assign sel_tmp_fu_301_p3 = ((tmp_7_fu_295_p2[0:0] === 1'b1) ? p_cast_fu_287_p3 : 3'd4);

integer ap_tvar_int_1;

always @ (i_addr_V) begin
    for (ap_tvar_int_1 = 28 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 4) begin
            tagReg_V_fu_201_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tagReg_V_fu_201_p4[ap_tvar_int_1] = i_addr_V[31 - ap_tvar_int_1];
        end
    end
end

assign tmp9_fu_333_p2 = (tmp_13_2_reg_446 & sel_tmp6_fu_327_p2);

assign tmp_13_1_fu_226_p2 = ((tagReg_V_fu_201_p4 == tag_1_V_read) ? 1'b1 : 1'b0);

assign tmp_13_2_fu_232_p2 = ((tagReg_V_fu_201_p4 == tag_2_V_read) ? 1'b1 : 1'b0);

assign tmp_13_3_fu_238_p2 = ((tagReg_V_fu_201_p4 == tag_3_V_read) ? 1'b1 : 1'b0);

assign tmp_17_1_fu_395_p2 = ((indexReg_V_reg_423 == 4'd1) ? 1'b1 : 1'b0);

assign tmp_17_2_fu_400_p2 = ((indexReg_V_reg_423 == 4'd2) ? 1'b1 : 1'b0);

assign tmp_17_3_fu_405_p2 = ((indexReg_V_reg_423 == 4'd3) ? 1'b1 : 1'b0);

assign tmp_20_fu_244_p1 = valid_V[0:0];

assign tmp_21_fu_253_p3 = valid_V[32'd1];

assign tmp_22_fu_266_p3 = valid_V[32'd2];

assign tmp_23_fu_274_p3 = valid_V[32'd3];

assign tmp_24_fu_370_p1 = evictWay_lcssa_fu_358_p3[1:0];

assign tmp_3_fu_220_p2 = ((tagReg_V_fu_201_p4 == tag_0_V_read) ? 1'b1 : 1'b0);

assign tmp_4_fu_390_p2 = ((indexReg_V_reg_423 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_7_fu_295_p2 = (or_cond_fu_248_p2 | or_cond6_fu_282_p2);

assign tmp_8_fu_352_p2 = (sel_tmp7_fu_338_p2 | sel_tmp2_fu_315_p2);

assign tmp_fu_211_p1 = indexReg_V_fu_191_p4;

assign tmp_s_fu_384_p2 = ((p_Result_s_fu_374_p4 == 4'd15) ? 1'b1 : 1'b0);

endmodule //WriteHit
