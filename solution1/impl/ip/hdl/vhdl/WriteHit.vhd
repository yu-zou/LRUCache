-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity WriteHit is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_addr_V : IN STD_LOGIC_VECTOR (31 downto 0);
    i_wdata_V : IN STD_LOGIC_VECTOR (511 downto 0);
    valid_V : IN STD_LOGIC_VECTOR (3 downto 0);
    tag_0_V_read : IN STD_LOGIC_VECTOR (27 downto 0);
    tag_1_V_read : IN STD_LOGIC_VECTOR (27 downto 0);
    tag_2_V_read : IN STD_LOGIC_VECTOR (27 downto 0);
    tag_3_V_read : IN STD_LOGIC_VECTOR (27 downto 0);
    dataArray_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dataArray_0_V_ce0 : OUT STD_LOGIC;
    dataArray_0_V_we0 : OUT STD_LOGIC;
    dataArray_0_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dataArray_1_V_ce0 : OUT STD_LOGIC;
    dataArray_1_V_we0 : OUT STD_LOGIC;
    dataArray_1_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dataArray_2_V_ce0 : OUT STD_LOGIC;
    dataArray_2_V_we0 : OUT STD_LOGIC;
    dataArray_2_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dataArray_3_V_ce0 : OUT STD_LOGIC;
    dataArray_3_V_we0 : OUT STD_LOGIC;
    dataArray_3_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    mruArray_V_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    mruArray_V_2_ce0 : OUT STD_LOGIC;
    mruArray_V_2_we0 : OUT STD_LOGIC;
    mruArray_V_2_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    mruArray_V_2_q0 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of WriteHit is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indexReg_V_fu_191_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal indexReg_V_reg_423 : STD_LOGIC_VECTOR (3 downto 0);
    signal mruArray_V_1_addr_reg_431 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_436 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_1_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_1_reg_441 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_2_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_2_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_3_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_3_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal dataArray_0_V_addr_reg_456 : STD_LOGIC_VECTOR (3 downto 0);
    signal dataArray_1_V_addr_reg_461 : STD_LOGIC_VECTOR (3 downto 0);
    signal dataArray_2_V_addr_reg_466 : STD_LOGIC_VECTOR (3 downto 0);
    signal dataArray_3_V_addr_reg_471 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_24_fu_370_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tagReg_V_fu_201_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_20_fu_244_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_fu_287_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_cond4_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_266_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_cast_fu_344_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp_fu_301_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal evictWay_lcssa_fu_358_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal evictWay_lcssa_cast_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_374_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_17_3_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_2_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_1_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            ap_CS_fsm <= ap_ST_fsm_state1;
        elsif (ap_clk'event and ap_clk =  '1') then
            ap_CS_fsm <= ap_NS_fsm;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                dataArray_0_V_addr_reg_456 <= tmp_fu_211_p1(4 - 1 downto 0);
                dataArray_1_V_addr_reg_461 <= tmp_fu_211_p1(4 - 1 downto 0);
                dataArray_2_V_addr_reg_466 <= tmp_fu_211_p1(4 - 1 downto 0);
                dataArray_3_V_addr_reg_471 <= tmp_fu_211_p1(4 - 1 downto 0);
                indexReg_V_reg_423 <= indexReg_V_fu_191_p4;
                mruArray_V_1_addr_reg_431 <= tmp_fu_211_p1(4 - 1 downto 0);
                tmp_13_1_reg_441 <= tmp_13_1_fu_226_p2;
                tmp_13_2_reg_446 <= tmp_13_2_fu_232_p2;
                tmp_13_3_reg_451 <= tmp_13_3_fu_238_p2;
                tmp_3_reg_436 <= tmp_3_fu_220_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_0_V_address0 <= dataArray_0_V_addr_reg_456;

    dataArray_0_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dataArray_0_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_0_V_d0 <= i_wdata_V;

    dataArray_0_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_24_fu_370_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_24_fu_370_p1 = ap_const_lv2_0))) then 
            dataArray_0_V_we0 <= ap_const_logic_1;
        else 
            dataArray_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_1_V_address0 <= dataArray_1_V_addr_reg_461;

    dataArray_1_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dataArray_1_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_1_V_d0 <= i_wdata_V;

    dataArray_1_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_24_fu_370_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_24_fu_370_p1 = ap_const_lv2_1))) then 
            dataArray_1_V_we0 <= ap_const_logic_1;
        else 
            dataArray_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_2_V_address0 <= dataArray_2_V_addr_reg_466;

    dataArray_2_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dataArray_2_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_2_V_d0 <= i_wdata_V;

    dataArray_2_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_24_fu_370_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_24_fu_370_p1 = ap_const_lv2_2))) then 
            dataArray_2_V_we0 <= ap_const_logic_1;
        else 
            dataArray_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_3_V_address0 <= dataArray_3_V_addr_reg_471;

    dataArray_3_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dataArray_3_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_3_V_d0 <= i_wdata_V;

    dataArray_3_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_24_fu_370_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_24_fu_370_p1 = ap_const_lv2_3))) then 
            dataArray_3_V_we0 <= ap_const_logic_1;
        else 
            dataArray_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    evictWay_lcssa_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(evictWay_lcssa_fu_358_p3),32));
    evictWay_lcssa_fu_358_p3 <= 
        sel_tmp3_cast_fu_344_p3 when (tmp_8_fu_352_p2(0) = '1') else 
        sel_tmp_fu_301_p3;
    
    indexReg_V_fu_191_p4_proc : process(i_addr_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable indexReg_V_fu_191_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_3(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := i_addr_V;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_3(5-1 downto 0)));
            for indexReg_V_fu_191_p4_i in 0 to 32-1 loop
                v0_cpy(indexReg_V_fu_191_p4_i) := i_addr_V(32-1-indexReg_V_fu_191_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        indexReg_V_fu_191_p4 <= resvalue(4-1 downto 0);
    end process;


    mruArray_V_2_address0_assign_proc : process(ap_CS_fsm_state1, mruArray_V_1_addr_reg_431, tmp_fu_211_p1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mruArray_V_2_address0 <= mruArray_V_1_addr_reg_431;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            mruArray_V_2_address0 <= tmp_fu_211_p1(4 - 1 downto 0);
        else 
            mruArray_V_2_address0 <= "XXXX";
        end if; 
    end process;


    mruArray_V_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            mruArray_V_2_ce0 <= ap_const_logic_1;
        else 
            mruArray_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mruArray_V_2_d0 <= (((tmp_17_3_fu_405_p2 & tmp_17_2_fu_400_p2) & tmp_17_1_fu_395_p2) & tmp_4_fu_390_p2);

    mruArray_V_2_we0_assign_proc : process(ap_CS_fsm_state2, tmp_24_fu_370_p1, tmp_s_fu_384_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_s_fu_384_p2 = ap_const_lv1_1) and (tmp_24_fu_370_p1 = ap_const_lv2_3)) or ((tmp_s_fu_384_p2 = ap_const_lv1_1) and (tmp_24_fu_370_p1 = ap_const_lv2_2)) or ((tmp_s_fu_384_p2 = ap_const_lv1_1) and (tmp_24_fu_370_p1 = ap_const_lv2_1)) or ((tmp_s_fu_384_p2 = ap_const_lv1_1) and (tmp_24_fu_370_p1 = ap_const_lv2_0))))) then 
            mruArray_V_2_we0 <= ap_const_logic_1;
        else 
            mruArray_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond4_fu_261_p2 <= (tmp_21_fu_253_p3 and tmp_13_1_reg_441);
    or_cond6_fu_282_p2 <= (tmp_23_fu_274_p3 and tmp_13_3_reg_451);
    or_cond_fu_248_p2 <= (tmp_3_reg_436 and tmp_20_fu_244_p1);
    
    p_Result_s_fu_374_p4_proc : process(mruArray_V_2_q0, evictWay_lcssa_cast_fu_366_p1)
    variable result: std_logic_vector(0 downto 0);
    begin
        p_Result_s_fu_374_p4 <= mruArray_V_2_q0;
        if to_integer(unsigned(evictWay_lcssa_cast_fu_366_p1)) >= mruArray_V_2_q0'low and to_integer(unsigned(evictWay_lcssa_cast_fu_366_p1)) <= mruArray_V_2_q0'high then
            result(0) := '0';
            for i in ap_const_lv4_1'range loop
                result(0) := result(0) or ap_const_lv4_1(i);
            end loop;
            p_Result_s_fu_374_p4(to_integer(unsigned(evictWay_lcssa_cast_fu_366_p1))) <= result(0);
        end if;
    end process;

    p_cast_fu_287_p3 <= 
        ap_const_lv3_0 when (or_cond_fu_248_p2(0) = '1') else 
        ap_const_lv3_3;
    sel_tmp1_fu_309_p2 <= (or_cond_fu_248_p2 xor ap_const_lv1_1);
    sel_tmp2_fu_315_p2 <= (sel_tmp1_fu_309_p2 and or_cond4_fu_261_p2);
    sel_tmp3_cast_fu_344_p3 <= 
        ap_const_lv3_2 when (sel_tmp7_fu_338_p2(0) = '1') else 
        ap_const_lv3_1;
    sel_tmp6_demorgan_fu_321_p2 <= (or_cond_fu_248_p2 or or_cond4_fu_261_p2);
    sel_tmp6_fu_327_p2 <= (sel_tmp6_demorgan_fu_321_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_338_p2 <= (tmp_22_fu_266_p3 and tmp9_fu_333_p2);
    sel_tmp_fu_301_p3 <= 
        p_cast_fu_287_p3 when (tmp_7_fu_295_p2(0) = '1') else 
        ap_const_lv3_4;
    
    tagReg_V_fu_201_p4_proc : process(i_addr_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tagReg_V_fu_201_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_4(5 - 1 downto 0);
        v0_cpy := i_addr_V;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_4(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tagReg_V_fu_201_p4_i in 0 to 32-1 loop
                v0_cpy(tagReg_V_fu_201_p4_i) := i_addr_V(32-1-tagReg_V_fu_201_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tagReg_V_fu_201_p4 <= resvalue(28-1 downto 0);
    end process;

    tmp9_fu_333_p2 <= (tmp_13_2_reg_446 and sel_tmp6_fu_327_p2);
    tmp_13_1_fu_226_p2 <= "1" when (tagReg_V_fu_201_p4 = tag_1_V_read) else "0";
    tmp_13_2_fu_232_p2 <= "1" when (tagReg_V_fu_201_p4 = tag_2_V_read) else "0";
    tmp_13_3_fu_238_p2 <= "1" when (tagReg_V_fu_201_p4 = tag_3_V_read) else "0";
    tmp_17_1_fu_395_p2 <= "1" when (indexReg_V_reg_423 = ap_const_lv4_1) else "0";
    tmp_17_2_fu_400_p2 <= "1" when (indexReg_V_reg_423 = ap_const_lv4_2) else "0";
    tmp_17_3_fu_405_p2 <= "1" when (indexReg_V_reg_423 = ap_const_lv4_3) else "0";
    tmp_20_fu_244_p1 <= valid_V(1 - 1 downto 0);
    tmp_21_fu_253_p3 <= valid_V(1 downto 1);
    tmp_22_fu_266_p3 <= valid_V(2 downto 2);
    tmp_23_fu_274_p3 <= valid_V(3 downto 3);
    tmp_24_fu_370_p1 <= evictWay_lcssa_fu_358_p3(2 - 1 downto 0);
    tmp_3_fu_220_p2 <= "1" when (tagReg_V_fu_201_p4 = tag_0_V_read) else "0";
    tmp_4_fu_390_p2 <= "1" when (indexReg_V_reg_423 = ap_const_lv4_0) else "0";
    tmp_7_fu_295_p2 <= (or_cond_fu_248_p2 or or_cond6_fu_282_p2);
    tmp_8_fu_352_p2 <= (sel_tmp7_fu_338_p2 or sel_tmp2_fu_315_p2);
    tmp_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indexReg_V_fu_191_p4),64));
    tmp_s_fu_384_p2 <= "1" when (p_Result_s_fu_374_p4 = ap_const_lv4_F) else "0";
end behav;
