-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity WriteMiss is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_addr_V : IN STD_LOGIC_VECTOR (31 downto 0);
    i_wdata_V : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_dram_V_AWVALID : OUT STD_LOGIC;
    m_axi_dram_V_AWREADY : IN STD_LOGIC;
    m_axi_dram_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dram_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dram_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dram_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dram_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_WVALID : OUT STD_LOGIC;
    m_axi_dram_V_WREADY : IN STD_LOGIC;
    m_axi_dram_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_dram_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_dram_V_WLAST : OUT STD_LOGIC;
    m_axi_dram_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_ARVALID : OUT STD_LOGIC;
    m_axi_dram_V_ARREADY : IN STD_LOGIC;
    m_axi_dram_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dram_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dram_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dram_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dram_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_RVALID : IN STD_LOGIC;
    m_axi_dram_V_RREADY : OUT STD_LOGIC;
    m_axi_dram_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_dram_V_RLAST : IN STD_LOGIC;
    m_axi_dram_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_V_BVALID : IN STD_LOGIC;
    m_axi_dram_V_BREADY : OUT STD_LOGIC;
    m_axi_dram_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    dram_V_offset : IN STD_LOGIC_VECTOR (25 downto 0);
    valid_V : IN STD_LOGIC_VECTOR (3 downto 0);
    tag_0_V_read : IN STD_LOGIC_VECTOR (27 downto 0);
    tag_1_V_read : IN STD_LOGIC_VECTOR (27 downto 0);
    tag_2_V_read : IN STD_LOGIC_VECTOR (27 downto 0);
    tag_3_V_read : IN STD_LOGIC_VECTOR (27 downto 0);
    validArray_V_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    validArray_V_2_ce0 : OUT STD_LOGIC;
    validArray_V_2_we0 : OUT STD_LOGIC;
    validArray_V_2_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tagArray_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tagArray_0_V_ce0 : OUT STD_LOGIC;
    tagArray_0_V_we0 : OUT STD_LOGIC;
    tagArray_0_V_d0 : OUT STD_LOGIC_VECTOR (27 downto 0);
    tagArray_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tagArray_1_V_ce0 : OUT STD_LOGIC;
    tagArray_1_V_we0 : OUT STD_LOGIC;
    tagArray_1_V_d0 : OUT STD_LOGIC_VECTOR (27 downto 0);
    tagArray_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tagArray_2_V_ce0 : OUT STD_LOGIC;
    tagArray_2_V_we0 : OUT STD_LOGIC;
    tagArray_2_V_d0 : OUT STD_LOGIC_VECTOR (27 downto 0);
    tagArray_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tagArray_3_V_ce0 : OUT STD_LOGIC;
    tagArray_3_V_we0 : OUT STD_LOGIC;
    tagArray_3_V_d0 : OUT STD_LOGIC_VECTOR (27 downto 0);
    mruArray_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    mruArray_V_ce0 : OUT STD_LOGIC;
    mruArray_V_we0 : OUT STD_LOGIC;
    mruArray_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    mruArray_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    dataArray_V_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dataArray_V_0_ce0 : OUT STD_LOGIC;
    dataArray_V_0_we0 : OUT STD_LOGIC;
    dataArray_V_0_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_V_0_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_V_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dataArray_V_1_ce0 : OUT STD_LOGIC;
    dataArray_V_1_we0 : OUT STD_LOGIC;
    dataArray_V_1_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_V_1_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_V_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dataArray_V_2_ce0 : OUT STD_LOGIC;
    dataArray_V_2_we0 : OUT STD_LOGIC;
    dataArray_V_2_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_V_2_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_V_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dataArray_V_3_ce0 : OUT STD_LOGIC;
    dataArray_V_3_we0 : OUT STD_LOGIC;
    dataArray_V_3_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_V_3_q0 : IN STD_LOGIC_VECTOR (511 downto 0) );
end;


architecture behav of WriteMiss is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dram_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal dram_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal dram_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal isEvict_2_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal indexReg_V_fu_348_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal indexReg_V_reg_836 : STD_LOGIC_VECTOR (3 downto 0);
    signal tagReg_V_fu_358_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tagReg_V_reg_845 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_853 : STD_LOGIC_VECTOR (63 downto 0);
    signal mruArray_V_addr_reg_870 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tempMru_V_reg_888 : STD_LOGIC_VECTOR (3 downto 0);
    signal tempValid_V_1_fu_591_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tempValid_V_1_reg_893 : STD_LOGIC_VECTOR (3 downto 0);
    signal Hi_assign_fu_645_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal Hi_assign_reg_898 : STD_LOGIC_VECTOR (2 downto 0);
    signal Hi_assign_cast_fu_653_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hi_assign_cast_reg_903 : STD_LOGIC_VECTOR (31 downto 0);
    signal isEvict_2_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_717_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_16_reg_913 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Repl2_1_fu_721_p6 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Repl2_1_reg_918 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sum_fu_748_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_reg_943 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_6_fu_754_p6 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_6_reg_948 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_sig_ioackin_m_axi_dram_V_AWREADY : STD_LOGIC;
    signal dataArray_V_0_addr_gep_fu_279_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal dataArray_V_1_addr_gep_fu_286_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal dataArray_V_2_addr_gep_fu_293_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal dataArray_V_3_addr_gep_fu_300_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_cast_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_dram_V_AWREADY : STD_LOGIC := '0';
    signal ap_block_state10 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_dram_V_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_dram_V_WREADY : STD_LOGIC;
    signal tmp_17_fu_777_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_419_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_435_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_379_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_387_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_403_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_383_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_395_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_511_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sel_tmp19_demorgan_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_fu_543_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sel_tmp15_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_557_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_411_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp17_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp16_fu_571_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp19_fu_607_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp18_fu_599_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp20_fu_617_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp21_fu_625_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_s_fu_427_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp50_cast_fu_633_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_3_fu_443_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp22_fu_637_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp5_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_not_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp23_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp24_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp25_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp1_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_fu_721_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_s_fu_735_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_cast_fu_745_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast_fu_741_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_2_fu_789_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_3_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_2_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_1_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component PLRUCache_mux_42_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        din3 : IN STD_LOGIC_VECTOR (27 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component PLRUCache_mux_42_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (511 downto 0);
        din2 : IN STD_LOGIC_VECTOR (511 downto 0);
        din3 : IN STD_LOGIC_VECTOR (511 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;



begin
    PLRUCache_mux_42_cud_U47 : component PLRUCache_mux_42_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        din2_WIDTH => 28,
        din3_WIDTH => 28,
        din4_WIDTH => 2,
        dout_WIDTH => 28)
    port map (
        din0 => tag_0_V_read,
        din1 => tag_1_V_read,
        din2 => tag_2_V_read,
        din3 => tag_3_V_read,
        din4 => p_Repl2_1_fu_721_p5,
        dout => p_Repl2_1_fu_721_p6);

    PLRUCache_mux_42_bkb_U48 : component PLRUCache_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 512,
        din1_WIDTH => 512,
        din2_WIDTH => 512,
        din3_WIDTH => 512,
        din4_WIDTH => 2,
        dout_WIDTH => 512)
    port map (
        din0 => dataArray_V_0_q0,
        din1 => dataArray_V_1_q0,
        din2 => dataArray_V_2_q0,
        din3 => dataArray_V_3_q0,
        din4 => tmp_16_reg_913,
        dout => tmp_6_fu_754_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_dram_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_dram_V_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    if ((ap_sig_ioackin_m_axi_dram_V_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_dram_V_AWREADY <= ap_const_logic_0;
                    elsif ((m_axi_dram_V_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_dram_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_dram_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_dram_V_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    if ((ap_sig_ioackin_m_axi_dram_V_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_dram_V_WREADY <= ap_const_logic_0;
                    elsif ((m_axi_dram_V_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_dram_V_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    Hi_assign_cast_reg_903(2 downto 0) <= Hi_assign_cast_fu_653_p1(2 downto 0);
                Hi_assign_reg_898 <= Hi_assign_fu_645_p3;
                isEvict_2_reg_909 <= isEvict_2_fu_711_p2;
                tempMru_V_reg_888 <= mruArray_V_q0;
                tempValid_V_1_reg_893 <= tempValid_V_1_fu_591_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                indexReg_V_reg_836 <= indexReg_V_fu_348_p4;
                mruArray_V_addr_reg_870 <= tmp_fu_368_p1(4 - 1 downto 0);
                tagReg_V_reg_845 <= tagReg_V_fu_358_p4;
                    tmp_reg_853(3 downto 0) <= tmp_fu_368_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (isEvict_2_fu_711_p2 = ap_const_lv1_1))) then
                p_Repl2_1_reg_918 <= p_Repl2_1_fu_721_p6;
                tmp_16_reg_913 <= tmp_16_fu_717_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sum_reg_943 <= sum_fu_748_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_m_axi_dram_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_6_reg_948 <= tmp_6_fu_754_p6;
            end if;
        end if;
    end process;
    tmp_reg_853(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    Hi_assign_cast_reg_903(31 downto 3) <= "00000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_dram_V_BVALID, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state10, isEvict_2_reg_909, ap_CS_fsm_state2, isEvict_2_fu_711_p2, ap_sig_ioackin_m_axi_dram_V_AWREADY, ap_sig_ioackin_m_axi_dram_V_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((isEvict_2_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_sig_ioackin_m_axi_dram_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_sig_ioackin_m_axi_dram_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    Hi_assign_cast_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hi_assign_fu_645_p3),32));
    Hi_assign_fu_645_p3 <= 
        p_3_fu_443_p3 when (sel_tmp17_fu_585_p2(0) = '1') else 
        sel_tmp22_fu_637_p3;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state10_assign_proc : process(m_axi_dram_V_BVALID, isEvict_2_reg_909)
    begin
                ap_block_state10 <= ((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909)
    begin
        if (((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_dram_V_AWREADY_assign_proc : process(m_axi_dram_V_AWREADY, ap_reg_ioackin_m_axi_dram_V_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_dram_V_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_dram_V_AWREADY <= m_axi_dram_V_AWREADY;
        else 
            ap_sig_ioackin_m_axi_dram_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_dram_V_WREADY_assign_proc : process(m_axi_dram_V_WREADY, ap_reg_ioackin_m_axi_dram_V_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_dram_V_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_dram_V_WREADY <= m_axi_dram_V_WREADY;
        else 
            ap_sig_ioackin_m_axi_dram_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    dataArray_V_0_addr_gep_fu_279_p3 <= tmp_reg_853(4 - 1 downto 0);

    dataArray_V_0_address0_assign_proc : process(ap_CS_fsm_state10, tmp_reg_853, ap_CS_fsm_state3, dataArray_V_0_addr_gep_fu_279_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dataArray_V_0_address0 <= dataArray_V_0_addr_gep_fu_279_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dataArray_V_0_address0 <= tmp_reg_853(4 - 1 downto 0);
        else 
            dataArray_V_0_address0 <= "XXXX";
        end if; 
    end process;


    dataArray_V_0_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            dataArray_V_0_ce0 <= ap_const_logic_1;
        else 
            dataArray_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_V_0_d0 <= i_wdata_V;

    dataArray_V_0_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909, tmp_17_fu_777_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (tmp_17_fu_777_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            dataArray_V_0_we0 <= ap_const_logic_1;
        else 
            dataArray_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_V_1_addr_gep_fu_286_p3 <= tmp_reg_853(4 - 1 downto 0);

    dataArray_V_1_address0_assign_proc : process(ap_CS_fsm_state10, tmp_reg_853, ap_CS_fsm_state3, dataArray_V_1_addr_gep_fu_286_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dataArray_V_1_address0 <= dataArray_V_1_addr_gep_fu_286_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dataArray_V_1_address0 <= tmp_reg_853(4 - 1 downto 0);
        else 
            dataArray_V_1_address0 <= "XXXX";
        end if; 
    end process;


    dataArray_V_1_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            dataArray_V_1_ce0 <= ap_const_logic_1;
        else 
            dataArray_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_V_1_d0 <= i_wdata_V;

    dataArray_V_1_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909, tmp_17_fu_777_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (tmp_17_fu_777_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            dataArray_V_1_we0 <= ap_const_logic_1;
        else 
            dataArray_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_V_2_addr_gep_fu_293_p3 <= tmp_reg_853(4 - 1 downto 0);

    dataArray_V_2_address0_assign_proc : process(ap_CS_fsm_state10, tmp_reg_853, ap_CS_fsm_state3, dataArray_V_2_addr_gep_fu_293_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dataArray_V_2_address0 <= dataArray_V_2_addr_gep_fu_293_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dataArray_V_2_address0 <= tmp_reg_853(4 - 1 downto 0);
        else 
            dataArray_V_2_address0 <= "XXXX";
        end if; 
    end process;


    dataArray_V_2_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            dataArray_V_2_ce0 <= ap_const_logic_1;
        else 
            dataArray_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_V_2_d0 <= i_wdata_V;

    dataArray_V_2_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909, tmp_17_fu_777_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (tmp_17_fu_777_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            dataArray_V_2_we0 <= ap_const_logic_1;
        else 
            dataArray_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_V_3_addr_gep_fu_300_p3 <= tmp_reg_853(4 - 1 downto 0);

    dataArray_V_3_address0_assign_proc : process(ap_CS_fsm_state10, tmp_reg_853, ap_CS_fsm_state3, dataArray_V_3_addr_gep_fu_300_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dataArray_V_3_address0 <= dataArray_V_3_addr_gep_fu_300_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dataArray_V_3_address0 <= tmp_reg_853(4 - 1 downto 0);
        else 
            dataArray_V_3_address0 <= "XXXX";
        end if; 
    end process;


    dataArray_V_3_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            dataArray_V_3_ce0 <= ap_const_logic_1;
        else 
            dataArray_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_V_3_d0 <= i_wdata_V;

    dataArray_V_3_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909, tmp_17_fu_777_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (tmp_17_fu_777_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            dataArray_V_3_we0 <= ap_const_logic_1;
        else 
            dataArray_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dram_V_blk_n_AW_assign_proc : process(m_axi_dram_V_AWREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dram_V_blk_n_AW <= m_axi_dram_V_AWREADY;
        else 
            dram_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    dram_V_blk_n_B_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (isEvict_2_reg_909 = ap_const_lv1_1))) then 
            dram_V_blk_n_B <= m_axi_dram_V_BVALID;
        else 
            dram_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    dram_V_blk_n_W_assign_proc : process(m_axi_dram_V_WREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dram_V_blk_n_W <= m_axi_dram_V_WREADY;
        else 
            dram_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    
    indexReg_V_fu_348_p4_proc : process(i_addr_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable indexReg_V_fu_348_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_3(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := i_addr_V;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_3(5-1 downto 0)));
            for indexReg_V_fu_348_p4_i in 0 to 32-1 loop
                v0_cpy(indexReg_V_fu_348_p4_i) := i_addr_V(32-1-indexReg_V_fu_348_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        indexReg_V_fu_348_p4 <= resvalue(4-1 downto 0);
    end process;

    isEvict_2_fu_711_p2 <= (sel_tmp25_fu_699_p2 and not_sel_tmp1_fu_705_p2);
    m_axi_dram_V_ARADDR <= ap_const_lv32_0;
    m_axi_dram_V_ARBURST <= ap_const_lv2_0;
    m_axi_dram_V_ARCACHE <= ap_const_lv4_0;
    m_axi_dram_V_ARID <= ap_const_lv1_0;
    m_axi_dram_V_ARLEN <= ap_const_lv32_0;
    m_axi_dram_V_ARLOCK <= ap_const_lv2_0;
    m_axi_dram_V_ARPROT <= ap_const_lv3_0;
    m_axi_dram_V_ARQOS <= ap_const_lv4_0;
    m_axi_dram_V_ARREGION <= ap_const_lv4_0;
    m_axi_dram_V_ARSIZE <= ap_const_lv3_0;
    m_axi_dram_V_ARUSER <= ap_const_lv1_0;
    m_axi_dram_V_ARVALID <= ap_const_logic_0;
    m_axi_dram_V_AWADDR <= sum_cast_fu_767_p1(32 - 1 downto 0);
    m_axi_dram_V_AWBURST <= ap_const_lv2_0;
    m_axi_dram_V_AWCACHE <= ap_const_lv4_0;
    m_axi_dram_V_AWID <= ap_const_lv1_0;
    m_axi_dram_V_AWLEN <= ap_const_lv32_1;
    m_axi_dram_V_AWLOCK <= ap_const_lv2_0;
    m_axi_dram_V_AWPROT <= ap_const_lv3_0;
    m_axi_dram_V_AWQOS <= ap_const_lv4_0;
    m_axi_dram_V_AWREGION <= ap_const_lv4_0;
    m_axi_dram_V_AWSIZE <= ap_const_lv3_0;
    m_axi_dram_V_AWUSER <= ap_const_lv1_0;

    m_axi_dram_V_AWVALID_assign_proc : process(ap_CS_fsm_state4, ap_reg_ioackin_m_axi_dram_V_AWREADY)
    begin
        if (((ap_reg_ioackin_m_axi_dram_V_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_dram_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_dram_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_dram_V_BREADY_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (isEvict_2_reg_909 = ap_const_lv1_1))) then 
            m_axi_dram_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_dram_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_dram_V_RREADY <= ap_const_logic_0;
    m_axi_dram_V_WDATA <= tmp_6_reg_948;
    m_axi_dram_V_WID <= ap_const_lv1_0;
    m_axi_dram_V_WLAST <= ap_const_logic_0;
    m_axi_dram_V_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_dram_V_WUSER <= ap_const_lv1_0;

    m_axi_dram_V_WVALID_assign_proc : process(ap_CS_fsm_state5, ap_reg_ioackin_m_axi_dram_V_WREADY)
    begin
        if (((ap_reg_ioackin_m_axi_dram_V_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_dram_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_dram_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mruArray_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state10, tmp_fu_368_p1, mruArray_V_addr_reg_870)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mruArray_V_address0 <= mruArray_V_addr_reg_870;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            mruArray_V_address0 <= tmp_fu_368_p1(4 - 1 downto 0);
        else 
            mruArray_V_address0 <= "XXXX";
        end if; 
    end process;


    mruArray_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            mruArray_V_ce0 <= ap_const_logic_1;
        else 
            mruArray_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mruArray_V_d0 <= (((tmp_10_3_fu_818_p2 & tmp_10_2_fu_813_p2) & tmp_10_1_fu_808_p2) & tmp_2_fu_803_p2);

    mruArray_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909, tmp_17_fu_777_p1, tmp_7_fu_797_p2)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (((tmp_17_fu_777_p1 = ap_const_lv2_3) and (tmp_7_fu_797_p2 = ap_const_lv1_1)) or ((tmp_17_fu_777_p1 = ap_const_lv2_2) and (tmp_7_fu_797_p2 = ap_const_lv1_1)) or ((tmp_17_fu_777_p1 = ap_const_lv2_1) and (tmp_7_fu_797_p2 = ap_const_lv1_1)) or ((tmp_17_fu_777_p1 = ap_const_lv2_0) and (tmp_7_fu_797_p2 = ap_const_lv1_1))))) then 
            mruArray_V_we0 <= ap_const_logic_1;
        else 
            mruArray_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    not_sel_tmp1_fu_705_p2 <= (sel_tmp17_fu_585_p2 xor ap_const_lv1_1);
    not_sel_tmp_fu_681_p2 <= (tmp_1_fu_373_p2 or tmp6_fu_675_p2);
    p_3_fu_443_p3 <= 
        ap_const_lv3_4 when (tmp_15_fu_435_p3(0) = '1') else 
        ap_const_lv3_3;
    p_Repl2_1_fu_721_p5 <= Hi_assign_fu_645_p3(2 - 1 downto 0);
    
    p_Result_2_fu_789_p4_proc : process(tempMru_V_reg_888, Hi_assign_cast_reg_903)
    variable result: std_logic_vector(0 downto 0);
    begin
        p_Result_2_fu_789_p4 <= tempMru_V_reg_888;
        if to_integer(unsigned(Hi_assign_cast_reg_903)) >= tempMru_V_reg_888'low and to_integer(unsigned(Hi_assign_cast_reg_903)) <= tempMru_V_reg_888'high then
            result(0) := '0';
            for i in ap_const_lv4_1'range loop
                result(0) := result(0) or ap_const_lv4_1(i);
            end loop;
            p_Result_2_fu_789_p4(to_integer(unsigned(Hi_assign_cast_reg_903))) <= result(0);
        end if;
    end process;

    p_Result_2_not_fu_669_p2 <= (tmp_9_fu_383_p1 xor ap_const_lv1_1);
    p_Result_s_fu_735_p3 <= (p_Repl2_1_reg_918 & indexReg_V_reg_836);
    p_s_fu_427_p3 <= 
        ap_const_lv3_4 when (tmp_14_fu_419_p3(0) = '1') else 
        ap_const_lv3_3;
    sel_tmp10_fu_525_p2 <= (tmp_9_fu_383_p1 and sel_tmp4_fu_519_p2);
    sel_tmp11_fu_531_p2 <= (tmp_11_fu_395_p3 xor ap_const_lv1_1);
    sel_tmp12_fu_537_p2 <= (sel_tmp11_fu_531_p2 and sel_tmp10_fu_525_p2);
    sel_tmp13_fu_543_p3 <= 
        valid_V when (sel_tmp12_fu_537_p2(0) = '1') else 
        sel_tmp8_fu_511_p3;
    sel_tmp14_fu_557_p3 <= 
        sel_tmp13_fu_543_p3 when (sel_tmp19_demorgan_fu_551_p2(0) = '1') else 
        valid_V;
    sel_tmp15_fu_565_p2 <= (tmp_12_fu_403_p3 and sel_tmp1_fu_457_p2);
    sel_tmp16_fu_571_p3 <= 
        ap_const_lv4_F when (sel_tmp15_fu_565_p2(0) = '1') else 
        sel_tmp14_fu_557_p3;
    sel_tmp17_fu_585_p2 <= (tmp4_fu_579_p2 and sel_tmp10_fu_525_p2);
    sel_tmp18_fu_599_p3 <= 
        ap_const_lv2_1 when (sel_tmp7_fu_481_p2(0) = '1') else 
        ap_const_lv2_2;
    sel_tmp19_demorgan_fu_551_p2 <= (tmp_9_fu_383_p1 or tmp_1_fu_373_p2);
    sel_tmp19_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sel_tmp12_fu_537_p2),2));
    sel_tmp1_fu_457_p2 <= (tmp_10_fu_387_p3 and sel_tmp_fu_451_p2);
    sel_tmp20_fu_617_p3 <= 
        sel_tmp19_fu_607_p1 when (tmp_4_fu_611_p2(0) = '1') else 
        sel_tmp18_fu_599_p3;
    sel_tmp21_fu_625_p3 <= 
        sel_tmp20_fu_617_p3 when (sel_tmp19_demorgan_fu_551_p2(0) = '1') else 
        ap_const_lv2_0;
    sel_tmp22_fu_637_p3 <= 
        p_s_fu_427_p3 when (sel_tmp15_fu_565_p2(0) = '1') else 
        sel_tmp50_cast_fu_633_p1;
    sel_tmp23_fu_663_p2 <= (tmp5_fu_657_p2 or sel_tmp7_fu_481_p2);
    sel_tmp24_fu_693_p2 <= (tmp7_fu_687_p2 and sel_tmp23_fu_663_p2);
    sel_tmp25_fu_699_p2 <= (sel_tmp24_fu_693_p2 or sel_tmp15_fu_565_p2);
    sel_tmp2_fu_463_p2 <= (tmp_12_fu_403_p3 xor ap_const_lv1_1);
    sel_tmp3_fu_469_p2 <= (sel_tmp2_fu_463_p2 and sel_tmp1_fu_457_p2);
    sel_tmp4_fu_519_p2 <= (tmp_1_fu_373_p2 xor ap_const_lv1_1);
    sel_tmp50_cast_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sel_tmp21_fu_625_p3),3));
    sel_tmp5_fu_493_p2 <= (tmp_1_fu_373_p2 and sel_tmp9_fu_487_p2);
    sel_tmp6_fu_475_p2 <= (tmp_10_fu_387_p3 xor ap_const_lv1_1);
    sel_tmp7_fu_481_p2 <= (sel_tmp_fu_451_p2 and sel_tmp6_fu_475_p2);
    sel_tmp8_fu_511_p3 <= 
        ap_const_lv4_F when (tmp_5_fu_505_p2(0) = '1') else 
        valid_V;
    sel_tmp9_fu_487_p2 <= (tmp_8_fu_379_p1 xor ap_const_lv1_1);
    sel_tmp_fu_451_p2 <= (tmp_8_fu_379_p1 and tmp_1_fu_373_p2);
    sext_cast_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dram_V_offset),33));
    sum_cast_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_reg_943),64));
    sum_fu_748_p2 <= std_logic_vector(unsigned(sext_cast_fu_745_p1) + unsigned(tmp_cast_fu_741_p1));
    tagArray_0_V_address0 <= tmp_reg_853(4 - 1 downto 0);

    tagArray_0_V_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            tagArray_0_V_ce0 <= ap_const_logic_1;
        else 
            tagArray_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_0_V_d0 <= tagReg_V_reg_845;

    tagArray_0_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909, tmp_17_fu_777_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (tmp_17_fu_777_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            tagArray_0_V_we0 <= ap_const_logic_1;
        else 
            tagArray_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_1_V_address0 <= tmp_reg_853(4 - 1 downto 0);

    tagArray_1_V_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            tagArray_1_V_ce0 <= ap_const_logic_1;
        else 
            tagArray_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_1_V_d0 <= tagReg_V_reg_845;

    tagArray_1_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909, tmp_17_fu_777_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (tmp_17_fu_777_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            tagArray_1_V_we0 <= ap_const_logic_1;
        else 
            tagArray_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_2_V_address0 <= tmp_reg_853(4 - 1 downto 0);

    tagArray_2_V_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            tagArray_2_V_ce0 <= ap_const_logic_1;
        else 
            tagArray_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_2_V_d0 <= tagReg_V_reg_845;

    tagArray_2_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909, tmp_17_fu_777_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (tmp_17_fu_777_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            tagArray_2_V_we0 <= ap_const_logic_1;
        else 
            tagArray_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_3_V_address0 <= tmp_reg_853(4 - 1 downto 0);

    tagArray_3_V_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            tagArray_3_V_ce0 <= ap_const_logic_1;
        else 
            tagArray_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_3_V_d0 <= tagReg_V_reg_845;

    tagArray_3_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909, tmp_17_fu_777_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (tmp_17_fu_777_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            tagArray_3_V_we0 <= ap_const_logic_1;
        else 
            tagArray_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    
    tagReg_V_fu_358_p4_proc : process(i_addr_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tagReg_V_fu_358_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_4(5 - 1 downto 0);
        v0_cpy := i_addr_V;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_4(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tagReg_V_fu_358_p4_i in 0 to 32-1 loop
                v0_cpy(tagReg_V_fu_358_p4_i) := i_addr_V(32-1-tagReg_V_fu_358_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tagReg_V_fu_358_p4 <= resvalue(28-1 downto 0);
    end process;

    tempValid_V_1_fu_591_p3 <= 
        valid_V when (sel_tmp17_fu_585_p2(0) = '1') else 
        sel_tmp16_fu_571_p3;
    tmp4_fu_579_p2 <= (tmp_13_fu_411_p3 and tmp_11_fu_395_p3);
    tmp5_fu_657_p2 <= (sel_tmp5_fu_493_p2 or sel_tmp3_fu_469_p2);
    tmp6_fu_675_p2 <= (tmp_11_fu_395_p3 or p_Result_2_not_fu_669_p2);
    tmp7_fu_687_p2 <= (sel_tmp19_demorgan_fu_551_p2 and not_sel_tmp_fu_681_p2);
    tmp_10_1_fu_808_p2 <= "1" when (indexReg_V_reg_836 = ap_const_lv4_1) else "0";
    tmp_10_2_fu_813_p2 <= "1" when (indexReg_V_reg_836 = ap_const_lv4_2) else "0";
    tmp_10_3_fu_818_p2 <= "1" when (indexReg_V_reg_836 = ap_const_lv4_3) else "0";
    tmp_10_fu_387_p3 <= mruArray_V_q0(1 downto 1);
    tmp_11_fu_395_p3 <= valid_V(1 downto 1);
    tmp_12_fu_403_p3 <= mruArray_V_q0(2 downto 2);
    tmp_13_fu_411_p3 <= valid_V(2 downto 2);
    tmp_14_fu_419_p3 <= mruArray_V_q0(3 downto 3);
    tmp_15_fu_435_p3 <= valid_V(3 downto 3);
    tmp_16_fu_717_p1 <= Hi_assign_fu_645_p3(2 - 1 downto 0);
    tmp_17_fu_777_p1 <= Hi_assign_reg_898(2 - 1 downto 0);
    tmp_1_fu_373_p2 <= "1" when (valid_V = ap_const_lv4_F) else "0";
    tmp_2_fu_803_p2 <= "1" when (indexReg_V_reg_836 = ap_const_lv4_0) else "0";
    tmp_3_fu_499_p2 <= (sel_tmp7_fu_481_p2 or sel_tmp5_fu_493_p2);
    tmp_4_fu_611_p2 <= (sel_tmp5_fu_493_p2 or sel_tmp12_fu_537_p2);
    tmp_5_fu_505_p2 <= (tmp_3_fu_499_p2 or sel_tmp3_fu_469_p2);
    tmp_7_fu_797_p2 <= "1" when (p_Result_2_fu_789_p4 = ap_const_lv4_F) else "0";
    tmp_8_fu_379_p1 <= mruArray_V_q0(1 - 1 downto 0);
    tmp_9_fu_383_p1 <= valid_V(1 - 1 downto 0);
    tmp_cast_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_735_p3),33));
    tmp_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indexReg_V_fu_348_p4),64));
    validArray_V_2_address0 <= tmp_reg_853(4 - 1 downto 0);

    validArray_V_2_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            validArray_V_2_ce0 <= ap_const_logic_1;
        else 
            validArray_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    validArray_V_2_d0_proc : process(tempValid_V_1_reg_893, Hi_assign_cast_reg_903)
    variable result: std_logic_vector(0 downto 0);
    begin
        validArray_V_2_d0 <= tempValid_V_1_reg_893;
        if to_integer(unsigned(Hi_assign_cast_reg_903)) >= tempValid_V_1_reg_893'low and to_integer(unsigned(Hi_assign_cast_reg_903)) <= tempValid_V_1_reg_893'high then
            result(0) := '0';
            for i in ap_const_lv4_1'range loop
                result(0) := result(0) or ap_const_lv4_1(i);
            end loop;
            validArray_V_2_d0(to_integer(unsigned(Hi_assign_cast_reg_903))) <= result(0);
        end if;
    end process;


    validArray_V_2_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state10, isEvict_2_reg_909)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_909 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            validArray_V_2_we0 <= ap_const_logic_1;
        else 
            validArray_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
