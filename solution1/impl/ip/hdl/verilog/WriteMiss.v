// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module WriteMiss (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_addr_V,
        i_wdata_V,
        m_axi_dram_V_AWVALID,
        m_axi_dram_V_AWREADY,
        m_axi_dram_V_AWADDR,
        m_axi_dram_V_AWID,
        m_axi_dram_V_AWLEN,
        m_axi_dram_V_AWSIZE,
        m_axi_dram_V_AWBURST,
        m_axi_dram_V_AWLOCK,
        m_axi_dram_V_AWCACHE,
        m_axi_dram_V_AWPROT,
        m_axi_dram_V_AWQOS,
        m_axi_dram_V_AWREGION,
        m_axi_dram_V_AWUSER,
        m_axi_dram_V_WVALID,
        m_axi_dram_V_WREADY,
        m_axi_dram_V_WDATA,
        m_axi_dram_V_WSTRB,
        m_axi_dram_V_WLAST,
        m_axi_dram_V_WID,
        m_axi_dram_V_WUSER,
        m_axi_dram_V_ARVALID,
        m_axi_dram_V_ARREADY,
        m_axi_dram_V_ARADDR,
        m_axi_dram_V_ARID,
        m_axi_dram_V_ARLEN,
        m_axi_dram_V_ARSIZE,
        m_axi_dram_V_ARBURST,
        m_axi_dram_V_ARLOCK,
        m_axi_dram_V_ARCACHE,
        m_axi_dram_V_ARPROT,
        m_axi_dram_V_ARQOS,
        m_axi_dram_V_ARREGION,
        m_axi_dram_V_ARUSER,
        m_axi_dram_V_RVALID,
        m_axi_dram_V_RREADY,
        m_axi_dram_V_RDATA,
        m_axi_dram_V_RLAST,
        m_axi_dram_V_RID,
        m_axi_dram_V_RUSER,
        m_axi_dram_V_RRESP,
        m_axi_dram_V_BVALID,
        m_axi_dram_V_BREADY,
        m_axi_dram_V_BRESP,
        m_axi_dram_V_BID,
        m_axi_dram_V_BUSER,
        dram_V_offset,
        valid_V,
        tag_0_V_read,
        tag_1_V_read,
        tag_2_V_read,
        tag_3_V_read,
        validArray_V_2_address0,
        validArray_V_2_ce0,
        validArray_V_2_we0,
        validArray_V_2_d0,
        tagArray_0_V_address0,
        tagArray_0_V_ce0,
        tagArray_0_V_we0,
        tagArray_0_V_d0,
        tagArray_1_V_address0,
        tagArray_1_V_ce0,
        tagArray_1_V_we0,
        tagArray_1_V_d0,
        tagArray_2_V_address0,
        tagArray_2_V_ce0,
        tagArray_2_V_we0,
        tagArray_2_V_d0,
        tagArray_3_V_address0,
        tagArray_3_V_ce0,
        tagArray_3_V_we0,
        tagArray_3_V_d0,
        mruArray_V_address0,
        mruArray_V_ce0,
        mruArray_V_we0,
        mruArray_V_d0,
        mruArray_V_q0,
        dataArray_V_0_address0,
        dataArray_V_0_ce0,
        dataArray_V_0_we0,
        dataArray_V_0_d0,
        dataArray_V_0_q0,
        dataArray_V_1_address0,
        dataArray_V_1_ce0,
        dataArray_V_1_we0,
        dataArray_V_1_d0,
        dataArray_V_1_q0,
        dataArray_V_2_address0,
        dataArray_V_2_ce0,
        dataArray_V_2_we0,
        dataArray_V_2_d0,
        dataArray_V_2_q0,
        dataArray_V_3_address0,
        dataArray_V_3_ce0,
        dataArray_V_3_we0,
        dataArray_V_3_d0,
        dataArray_V_3_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] i_addr_V;
input  [511:0] i_wdata_V;
output   m_axi_dram_V_AWVALID;
input   m_axi_dram_V_AWREADY;
output  [31:0] m_axi_dram_V_AWADDR;
output  [0:0] m_axi_dram_V_AWID;
output  [31:0] m_axi_dram_V_AWLEN;
output  [2:0] m_axi_dram_V_AWSIZE;
output  [1:0] m_axi_dram_V_AWBURST;
output  [1:0] m_axi_dram_V_AWLOCK;
output  [3:0] m_axi_dram_V_AWCACHE;
output  [2:0] m_axi_dram_V_AWPROT;
output  [3:0] m_axi_dram_V_AWQOS;
output  [3:0] m_axi_dram_V_AWREGION;
output  [0:0] m_axi_dram_V_AWUSER;
output   m_axi_dram_V_WVALID;
input   m_axi_dram_V_WREADY;
output  [511:0] m_axi_dram_V_WDATA;
output  [63:0] m_axi_dram_V_WSTRB;
output   m_axi_dram_V_WLAST;
output  [0:0] m_axi_dram_V_WID;
output  [0:0] m_axi_dram_V_WUSER;
output   m_axi_dram_V_ARVALID;
input   m_axi_dram_V_ARREADY;
output  [31:0] m_axi_dram_V_ARADDR;
output  [0:0] m_axi_dram_V_ARID;
output  [31:0] m_axi_dram_V_ARLEN;
output  [2:0] m_axi_dram_V_ARSIZE;
output  [1:0] m_axi_dram_V_ARBURST;
output  [1:0] m_axi_dram_V_ARLOCK;
output  [3:0] m_axi_dram_V_ARCACHE;
output  [2:0] m_axi_dram_V_ARPROT;
output  [3:0] m_axi_dram_V_ARQOS;
output  [3:0] m_axi_dram_V_ARREGION;
output  [0:0] m_axi_dram_V_ARUSER;
input   m_axi_dram_V_RVALID;
output   m_axi_dram_V_RREADY;
input  [511:0] m_axi_dram_V_RDATA;
input   m_axi_dram_V_RLAST;
input  [0:0] m_axi_dram_V_RID;
input  [0:0] m_axi_dram_V_RUSER;
input  [1:0] m_axi_dram_V_RRESP;
input   m_axi_dram_V_BVALID;
output   m_axi_dram_V_BREADY;
input  [1:0] m_axi_dram_V_BRESP;
input  [0:0] m_axi_dram_V_BID;
input  [0:0] m_axi_dram_V_BUSER;
input  [25:0] dram_V_offset;
input  [3:0] valid_V;
input  [27:0] tag_0_V_read;
input  [27:0] tag_1_V_read;
input  [27:0] tag_2_V_read;
input  [27:0] tag_3_V_read;
output  [3:0] validArray_V_2_address0;
output   validArray_V_2_ce0;
output   validArray_V_2_we0;
output  [3:0] validArray_V_2_d0;
output  [3:0] tagArray_0_V_address0;
output   tagArray_0_V_ce0;
output   tagArray_0_V_we0;
output  [27:0] tagArray_0_V_d0;
output  [3:0] tagArray_1_V_address0;
output   tagArray_1_V_ce0;
output   tagArray_1_V_we0;
output  [27:0] tagArray_1_V_d0;
output  [3:0] tagArray_2_V_address0;
output   tagArray_2_V_ce0;
output   tagArray_2_V_we0;
output  [27:0] tagArray_2_V_d0;
output  [3:0] tagArray_3_V_address0;
output   tagArray_3_V_ce0;
output   tagArray_3_V_we0;
output  [27:0] tagArray_3_V_d0;
output  [3:0] mruArray_V_address0;
output   mruArray_V_ce0;
output   mruArray_V_we0;
output  [3:0] mruArray_V_d0;
input  [3:0] mruArray_V_q0;
output  [3:0] dataArray_V_0_address0;
output   dataArray_V_0_ce0;
output   dataArray_V_0_we0;
output  [511:0] dataArray_V_0_d0;
input  [511:0] dataArray_V_0_q0;
output  [3:0] dataArray_V_1_address0;
output   dataArray_V_1_ce0;
output   dataArray_V_1_we0;
output  [511:0] dataArray_V_1_d0;
input  [511:0] dataArray_V_1_q0;
output  [3:0] dataArray_V_2_address0;
output   dataArray_V_2_ce0;
output   dataArray_V_2_we0;
output  [511:0] dataArray_V_2_d0;
input  [511:0] dataArray_V_2_q0;
output  [3:0] dataArray_V_3_address0;
output   dataArray_V_3_ce0;
output   dataArray_V_3_we0;
output  [511:0] dataArray_V_3_d0;
input  [511:0] dataArray_V_3_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_dram_V_AWVALID;
reg m_axi_dram_V_WVALID;
reg m_axi_dram_V_BREADY;
reg validArray_V_2_ce0;
reg validArray_V_2_we0;
reg[3:0] validArray_V_2_d0;
reg tagArray_0_V_ce0;
reg tagArray_0_V_we0;
reg tagArray_1_V_ce0;
reg tagArray_1_V_we0;
reg tagArray_2_V_ce0;
reg tagArray_2_V_we0;
reg tagArray_3_V_ce0;
reg tagArray_3_V_we0;
reg[3:0] mruArray_V_address0;
reg mruArray_V_ce0;
reg mruArray_V_we0;
reg[3:0] dataArray_V_0_address0;
reg dataArray_V_0_ce0;
reg dataArray_V_0_we0;
reg[3:0] dataArray_V_1_address0;
reg dataArray_V_1_ce0;
reg dataArray_V_1_we0;
reg[3:0] dataArray_V_2_address0;
reg dataArray_V_2_ce0;
reg dataArray_V_2_we0;
reg[3:0] dataArray_V_3_address0;
reg dataArray_V_3_ce0;
reg dataArray_V_3_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dram_V_blk_n_AW;
wire    ap_CS_fsm_state4;
reg    dram_V_blk_n_W;
wire    ap_CS_fsm_state5;
reg    dram_V_blk_n_B;
wire    ap_CS_fsm_state10;
reg   [0:0] isEvict_2_reg_909;
reg   [3:0] indexReg_V_fu_348_p4;
reg   [3:0] indexReg_V_reg_836;
reg   [27:0] tagReg_V_fu_358_p4;
reg   [27:0] tagReg_V_reg_845;
wire   [63:0] tmp_fu_368_p1;
reg   [63:0] tmp_reg_853;
reg   [3:0] mruArray_V_addr_reg_870;
wire    ap_CS_fsm_state2;
reg   [3:0] tempMru_V_reg_888;
wire   [3:0] tempValid_V_1_fu_591_p3;
reg   [3:0] tempValid_V_1_reg_893;
wire   [2:0] Hi_assign_fu_645_p3;
reg   [2:0] Hi_assign_reg_898;
wire   [31:0] Hi_assign_cast_fu_653_p1;
reg   [31:0] Hi_assign_cast_reg_903;
wire   [0:0] isEvict_2_fu_711_p2;
wire   [1:0] tmp_16_fu_717_p1;
reg   [1:0] tmp_16_reg_913;
wire   [27:0] p_Repl2_1_fu_721_p6;
reg   [27:0] p_Repl2_1_reg_918;
wire    ap_CS_fsm_state3;
wire   [32:0] sum_fu_748_p2;
reg   [32:0] sum_reg_943;
wire   [511:0] tmp_6_fu_754_p6;
reg   [511:0] tmp_6_reg_948;
reg    ap_sig_ioackin_m_axi_dram_V_AWREADY;
wire   [3:0] dataArray_V_0_addr_gep_fu_279_p3;
wire   [3:0] dataArray_V_1_addr_gep_fu_286_p3;
wire   [3:0] dataArray_V_2_addr_gep_fu_293_p3;
wire   [3:0] dataArray_V_3_addr_gep_fu_300_p3;
wire   [63:0] sum_cast_fu_767_p1;
reg    ap_reg_ioackin_m_axi_dram_V_AWREADY;
reg    ap_block_state10;
reg    ap_reg_ioackin_m_axi_dram_V_WREADY;
reg    ap_sig_ioackin_m_axi_dram_V_WREADY;
wire   [1:0] tmp_17_fu_777_p1;
wire   [0:0] tmp_7_fu_797_p2;
wire   [0:0] tmp_14_fu_419_p3;
wire   [0:0] tmp_15_fu_435_p3;
wire   [0:0] tmp_1_fu_373_p2;
wire   [0:0] tmp_8_fu_379_p1;
wire   [0:0] sel_tmp_fu_451_p2;
wire   [0:0] tmp_10_fu_387_p3;
wire   [0:0] tmp_12_fu_403_p3;
wire   [0:0] sel_tmp1_fu_457_p2;
wire   [0:0] sel_tmp2_fu_463_p2;
wire   [0:0] sel_tmp6_fu_475_p2;
wire   [0:0] sel_tmp9_fu_487_p2;
wire   [0:0] sel_tmp5_fu_493_p2;
wire   [0:0] sel_tmp7_fu_481_p2;
wire   [0:0] tmp_3_fu_499_p2;
wire   [0:0] sel_tmp3_fu_469_p2;
wire   [0:0] tmp_5_fu_505_p2;
wire   [0:0] tmp_9_fu_383_p1;
wire   [0:0] sel_tmp4_fu_519_p2;
wire   [0:0] tmp_11_fu_395_p3;
wire   [0:0] sel_tmp10_fu_525_p2;
wire   [0:0] sel_tmp11_fu_531_p2;
wire   [0:0] sel_tmp12_fu_537_p2;
wire   [3:0] sel_tmp8_fu_511_p3;
wire   [0:0] sel_tmp19_demorgan_fu_551_p2;
wire   [3:0] sel_tmp13_fu_543_p3;
wire   [0:0] sel_tmp15_fu_565_p2;
wire   [3:0] sel_tmp14_fu_557_p3;
wire   [0:0] tmp_13_fu_411_p3;
wire   [0:0] tmp4_fu_579_p2;
wire   [0:0] sel_tmp17_fu_585_p2;
wire   [3:0] sel_tmp16_fu_571_p3;
wire   [0:0] tmp_4_fu_611_p2;
wire   [1:0] sel_tmp19_fu_607_p1;
wire   [1:0] sel_tmp18_fu_599_p3;
wire   [1:0] sel_tmp20_fu_617_p3;
wire   [1:0] sel_tmp21_fu_625_p3;
wire   [2:0] p_s_fu_427_p3;
wire   [2:0] sel_tmp50_cast_fu_633_p1;
wire   [2:0] p_3_fu_443_p3;
wire   [2:0] sel_tmp22_fu_637_p3;
wire   [0:0] tmp5_fu_657_p2;
wire   [0:0] p_Result_2_not_fu_669_p2;
wire   [0:0] tmp6_fu_675_p2;
wire   [0:0] not_sel_tmp_fu_681_p2;
wire   [0:0] tmp7_fu_687_p2;
wire   [0:0] sel_tmp23_fu_663_p2;
wire   [0:0] sel_tmp24_fu_693_p2;
wire   [0:0] sel_tmp25_fu_699_p2;
wire   [0:0] not_sel_tmp1_fu_705_p2;
wire   [1:0] p_Repl2_1_fu_721_p5;
wire   [31:0] p_Result_s_fu_735_p3;
wire   [32:0] sext_cast_fu_745_p1;
wire   [32:0] tmp_cast_fu_741_p1;
reg   [3:0] p_Result_2_fu_789_p4;
wire   [0:0] tmp_10_3_fu_818_p2;
wire   [0:0] tmp_10_2_fu_813_p2;
wire   [0:0] tmp_10_1_fu_808_p2;
wire   [0:0] tmp_2_fu_803_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_reg_ioackin_m_axi_dram_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_dram_V_WREADY = 1'b0;
end

PLRUCache_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 28 ),
    .din2_WIDTH( 28 ),
    .din3_WIDTH( 28 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 28 ))
PLRUCache_mux_42_cud_U47(
    .din0(tag_0_V_read),
    .din1(tag_1_V_read),
    .din2(tag_2_V_read),
    .din3(tag_3_V_read),
    .din4(p_Repl2_1_fu_721_p5),
    .dout(p_Repl2_1_fu_721_p6)
);

PLRUCache_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 512 ),
    .din2_WIDTH( 512 ),
    .din3_WIDTH( 512 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 512 ))
PLRUCache_mux_42_bkb_U48(
    .din0(dataArray_V_0_q0),
    .din1(dataArray_V_1_q0),
    .din2(dataArray_V_2_q0),
    .din3(dataArray_V_3_q0),
    .din4(tmp_16_reg_913),
    .dout(tmp_6_fu_754_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_dram_V_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            if ((ap_sig_ioackin_m_axi_dram_V_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_dram_V_AWREADY <= 1'b0;
            end else if ((m_axi_dram_V_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_dram_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_dram_V_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((ap_sig_ioackin_m_axi_dram_V_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_dram_V_WREADY <= 1'b0;
            end else if ((m_axi_dram_V_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_dram_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Hi_assign_cast_reg_903[2 : 0] <= Hi_assign_cast_fu_653_p1[2 : 0];
        Hi_assign_reg_898 <= Hi_assign_fu_645_p3;
        isEvict_2_reg_909 <= isEvict_2_fu_711_p2;
        tempMru_V_reg_888 <= mruArray_V_q0;
        tempValid_V_1_reg_893 <= tempValid_V_1_fu_591_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indexReg_V_reg_836 <= indexReg_V_fu_348_p4;
        mruArray_V_addr_reg_870 <= tmp_fu_368_p1;
        tagReg_V_reg_845 <= tagReg_V_fu_358_p4;
        tmp_reg_853[3 : 0] <= tmp_fu_368_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (isEvict_2_fu_711_p2 == 1'd1))) begin
        p_Repl2_1_reg_918 <= p_Repl2_1_fu_721_p6;
        tmp_16_reg_913 <= tmp_16_fu_717_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_reg_943 <= sum_fu_748_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_m_axi_dram_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_6_reg_948 <= tmp_6_fu_754_p6;
    end
end

always @ (*) begin
    if (((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_dram_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_dram_V_AWREADY = m_axi_dram_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_dram_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_dram_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_dram_V_WREADY = m_axi_dram_V_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_dram_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dataArray_V_0_address0 = dataArray_V_0_addr_gep_fu_279_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dataArray_V_0_address0 = tmp_reg_853;
    end else begin
        dataArray_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10)))) begin
        dataArray_V_0_ce0 = 1'b1;
    end else begin
        dataArray_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (tmp_17_fu_777_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        dataArray_V_0_we0 = 1'b1;
    end else begin
        dataArray_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dataArray_V_1_address0 = dataArray_V_1_addr_gep_fu_286_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dataArray_V_1_address0 = tmp_reg_853;
    end else begin
        dataArray_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10)))) begin
        dataArray_V_1_ce0 = 1'b1;
    end else begin
        dataArray_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (tmp_17_fu_777_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        dataArray_V_1_we0 = 1'b1;
    end else begin
        dataArray_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dataArray_V_2_address0 = dataArray_V_2_addr_gep_fu_293_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dataArray_V_2_address0 = tmp_reg_853;
    end else begin
        dataArray_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10)))) begin
        dataArray_V_2_ce0 = 1'b1;
    end else begin
        dataArray_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (tmp_17_fu_777_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state10))) begin
        dataArray_V_2_we0 = 1'b1;
    end else begin
        dataArray_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dataArray_V_3_address0 = dataArray_V_3_addr_gep_fu_300_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dataArray_V_3_address0 = tmp_reg_853;
    end else begin
        dataArray_V_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10)))) begin
        dataArray_V_3_ce0 = 1'b1;
    end else begin
        dataArray_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (tmp_17_fu_777_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state10))) begin
        dataArray_V_3_we0 = 1'b1;
    end else begin
        dataArray_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dram_V_blk_n_AW = m_axi_dram_V_AWREADY;
    end else begin
        dram_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (isEvict_2_reg_909 == 1'd1))) begin
        dram_V_blk_n_B = m_axi_dram_V_BVALID;
    end else begin
        dram_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dram_V_blk_n_W = m_axi_dram_V_WREADY;
    end else begin
        dram_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_dram_V_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_dram_V_AWVALID = 1'b1;
    end else begin
        m_axi_dram_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10) & (isEvict_2_reg_909 == 1'd1))) begin
        m_axi_dram_V_BREADY = 1'b1;
    end else begin
        m_axi_dram_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_dram_V_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_dram_V_WVALID = 1'b1;
    end else begin
        m_axi_dram_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mruArray_V_address0 = mruArray_V_addr_reg_870;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        mruArray_V_address0 = tmp_fu_368_p1;
    end else begin
        mruArray_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10)))) begin
        mruArray_V_ce0 = 1'b1;
    end else begin
        mruArray_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10) & (((tmp_17_fu_777_p1 == 2'd3) & (tmp_7_fu_797_p2 == 1'd1)) | ((tmp_17_fu_777_p1 == 2'd2) & (tmp_7_fu_797_p2 == 1'd1)) | ((tmp_17_fu_777_p1 == 2'd1) & (tmp_7_fu_797_p2 == 1'd1)) | ((tmp_17_fu_777_p1 == 2'd0) & (tmp_7_fu_797_p2 == 1'd1))))) begin
        mruArray_V_we0 = 1'b1;
    end else begin
        mruArray_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10))) begin
        tagArray_0_V_ce0 = 1'b1;
    end else begin
        tagArray_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (tmp_17_fu_777_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        tagArray_0_V_we0 = 1'b1;
    end else begin
        tagArray_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10))) begin
        tagArray_1_V_ce0 = 1'b1;
    end else begin
        tagArray_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (tmp_17_fu_777_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        tagArray_1_V_we0 = 1'b1;
    end else begin
        tagArray_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10))) begin
        tagArray_2_V_ce0 = 1'b1;
    end else begin
        tagArray_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (tmp_17_fu_777_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state10))) begin
        tagArray_2_V_we0 = 1'b1;
    end else begin
        tagArray_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10))) begin
        tagArray_3_V_ce0 = 1'b1;
    end else begin
        tagArray_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (tmp_17_fu_777_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state10))) begin
        tagArray_3_V_we0 = 1'b1;
    end else begin
        tagArray_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10))) begin
        validArray_V_2_ce0 = 1'b1;
    end else begin
        validArray_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10))) begin
        validArray_V_2_we0 = 1'b1;
    end else begin
        validArray_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((isEvict_2_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_m_axi_dram_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_m_axi_dram_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_cast_fu_653_p1 = Hi_assign_fu_645_p3;

assign Hi_assign_fu_645_p3 = ((sel_tmp17_fu_585_p2[0:0] === 1'b1) ? p_3_fu_443_p3 : sel_tmp22_fu_637_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state10 = ((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_909 == 1'd1));
end

assign dataArray_V_0_addr_gep_fu_279_p3 = tmp_reg_853;

assign dataArray_V_0_d0 = i_wdata_V;

assign dataArray_V_1_addr_gep_fu_286_p3 = tmp_reg_853;

assign dataArray_V_1_d0 = i_wdata_V;

assign dataArray_V_2_addr_gep_fu_293_p3 = tmp_reg_853;

assign dataArray_V_2_d0 = i_wdata_V;

assign dataArray_V_3_addr_gep_fu_300_p3 = tmp_reg_853;

assign dataArray_V_3_d0 = i_wdata_V;

integer ap_tvar_int_0;

always @ (i_addr_V) begin
    for (ap_tvar_int_0 = 4 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 3 - 0) begin
            indexReg_V_fu_348_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            indexReg_V_fu_348_p4[ap_tvar_int_0] = i_addr_V[3 - ap_tvar_int_0];
        end
    end
end

assign isEvict_2_fu_711_p2 = (sel_tmp25_fu_699_p2 & not_sel_tmp1_fu_705_p2);

assign m_axi_dram_V_ARADDR = 32'd0;

assign m_axi_dram_V_ARBURST = 2'd0;

assign m_axi_dram_V_ARCACHE = 4'd0;

assign m_axi_dram_V_ARID = 1'd0;

assign m_axi_dram_V_ARLEN = 32'd0;

assign m_axi_dram_V_ARLOCK = 2'd0;

assign m_axi_dram_V_ARPROT = 3'd0;

assign m_axi_dram_V_ARQOS = 4'd0;

assign m_axi_dram_V_ARREGION = 4'd0;

assign m_axi_dram_V_ARSIZE = 3'd0;

assign m_axi_dram_V_ARUSER = 1'd0;

assign m_axi_dram_V_ARVALID = 1'b0;

assign m_axi_dram_V_AWADDR = sum_cast_fu_767_p1;

assign m_axi_dram_V_AWBURST = 2'd0;

assign m_axi_dram_V_AWCACHE = 4'd0;

assign m_axi_dram_V_AWID = 1'd0;

assign m_axi_dram_V_AWLEN = 32'd1;

assign m_axi_dram_V_AWLOCK = 2'd0;

assign m_axi_dram_V_AWPROT = 3'd0;

assign m_axi_dram_V_AWQOS = 4'd0;

assign m_axi_dram_V_AWREGION = 4'd0;

assign m_axi_dram_V_AWSIZE = 3'd0;

assign m_axi_dram_V_AWUSER = 1'd0;

assign m_axi_dram_V_RREADY = 1'b0;

assign m_axi_dram_V_WDATA = tmp_6_reg_948;

assign m_axi_dram_V_WID = 1'd0;

assign m_axi_dram_V_WLAST = 1'b0;

assign m_axi_dram_V_WSTRB = 64'd18446744073709551615;

assign m_axi_dram_V_WUSER = 1'd0;

assign mruArray_V_d0 = {{{{tmp_10_3_fu_818_p2}, {tmp_10_2_fu_813_p2}}, {tmp_10_1_fu_808_p2}}, {tmp_2_fu_803_p2}};

assign not_sel_tmp1_fu_705_p2 = (sel_tmp17_fu_585_p2 ^ 1'd1);

assign not_sel_tmp_fu_681_p2 = (tmp_1_fu_373_p2 | tmp6_fu_675_p2);

assign p_3_fu_443_p3 = ((tmp_15_fu_435_p3[0:0] === 1'b1) ? 3'd4 : 3'd3);

assign p_Repl2_1_fu_721_p5 = Hi_assign_fu_645_p3[1:0];

always @ (*) begin
    p_Result_2_fu_789_p4 = tempMru_V_reg_888;
    p_Result_2_fu_789_p4[Hi_assign_cast_reg_903] = |(4'd1);
end

assign p_Result_2_not_fu_669_p2 = (tmp_9_fu_383_p1 ^ 1'd1);

assign p_Result_s_fu_735_p3 = {{p_Repl2_1_reg_918}, {indexReg_V_reg_836}};

assign p_s_fu_427_p3 = ((tmp_14_fu_419_p3[0:0] === 1'b1) ? 3'd4 : 3'd3);

assign sel_tmp10_fu_525_p2 = (tmp_9_fu_383_p1 & sel_tmp4_fu_519_p2);

assign sel_tmp11_fu_531_p2 = (tmp_11_fu_395_p3 ^ 1'd1);

assign sel_tmp12_fu_537_p2 = (sel_tmp11_fu_531_p2 & sel_tmp10_fu_525_p2);

assign sel_tmp13_fu_543_p3 = ((sel_tmp12_fu_537_p2[0:0] === 1'b1) ? valid_V : sel_tmp8_fu_511_p3);

assign sel_tmp14_fu_557_p3 = ((sel_tmp19_demorgan_fu_551_p2[0:0] === 1'b1) ? sel_tmp13_fu_543_p3 : valid_V);

assign sel_tmp15_fu_565_p2 = (tmp_12_fu_403_p3 & sel_tmp1_fu_457_p2);

assign sel_tmp16_fu_571_p3 = ((sel_tmp15_fu_565_p2[0:0] === 1'b1) ? 4'd15 : sel_tmp14_fu_557_p3);

assign sel_tmp17_fu_585_p2 = (tmp4_fu_579_p2 & sel_tmp10_fu_525_p2);

assign sel_tmp18_fu_599_p3 = ((sel_tmp7_fu_481_p2[0:0] === 1'b1) ? 2'd1 : 2'd2);

assign sel_tmp19_demorgan_fu_551_p2 = (tmp_9_fu_383_p1 | tmp_1_fu_373_p2);

assign sel_tmp19_fu_607_p1 = sel_tmp12_fu_537_p2;

assign sel_tmp1_fu_457_p2 = (tmp_10_fu_387_p3 & sel_tmp_fu_451_p2);

assign sel_tmp20_fu_617_p3 = ((tmp_4_fu_611_p2[0:0] === 1'b1) ? sel_tmp19_fu_607_p1 : sel_tmp18_fu_599_p3);

assign sel_tmp21_fu_625_p3 = ((sel_tmp19_demorgan_fu_551_p2[0:0] === 1'b1) ? sel_tmp20_fu_617_p3 : 2'd0);

assign sel_tmp22_fu_637_p3 = ((sel_tmp15_fu_565_p2[0:0] === 1'b1) ? p_s_fu_427_p3 : sel_tmp50_cast_fu_633_p1);

assign sel_tmp23_fu_663_p2 = (tmp5_fu_657_p2 | sel_tmp7_fu_481_p2);

assign sel_tmp24_fu_693_p2 = (tmp7_fu_687_p2 & sel_tmp23_fu_663_p2);

assign sel_tmp25_fu_699_p2 = (sel_tmp24_fu_693_p2 | sel_tmp15_fu_565_p2);

assign sel_tmp2_fu_463_p2 = (tmp_12_fu_403_p3 ^ 1'd1);

assign sel_tmp3_fu_469_p2 = (sel_tmp2_fu_463_p2 & sel_tmp1_fu_457_p2);

assign sel_tmp4_fu_519_p2 = (tmp_1_fu_373_p2 ^ 1'd1);

assign sel_tmp50_cast_fu_633_p1 = sel_tmp21_fu_625_p3;

assign sel_tmp5_fu_493_p2 = (tmp_1_fu_373_p2 & sel_tmp9_fu_487_p2);

assign sel_tmp6_fu_475_p2 = (tmp_10_fu_387_p3 ^ 1'd1);

assign sel_tmp7_fu_481_p2 = (sel_tmp_fu_451_p2 & sel_tmp6_fu_475_p2);

assign sel_tmp8_fu_511_p3 = ((tmp_5_fu_505_p2[0:0] === 1'b1) ? 4'd15 : valid_V);

assign sel_tmp9_fu_487_p2 = (tmp_8_fu_379_p1 ^ 1'd1);

assign sel_tmp_fu_451_p2 = (tmp_8_fu_379_p1 & tmp_1_fu_373_p2);

assign sext_cast_fu_745_p1 = dram_V_offset;

assign sum_cast_fu_767_p1 = sum_reg_943;

assign sum_fu_748_p2 = (sext_cast_fu_745_p1 + tmp_cast_fu_741_p1);

assign tagArray_0_V_address0 = tmp_reg_853;

assign tagArray_0_V_d0 = tagReg_V_reg_845;

assign tagArray_1_V_address0 = tmp_reg_853;

assign tagArray_1_V_d0 = tagReg_V_reg_845;

assign tagArray_2_V_address0 = tmp_reg_853;

assign tagArray_2_V_d0 = tagReg_V_reg_845;

assign tagArray_3_V_address0 = tmp_reg_853;

assign tagArray_3_V_d0 = tagReg_V_reg_845;

integer ap_tvar_int_1;

always @ (i_addr_V) begin
    for (ap_tvar_int_1 = 28 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 4) begin
            tagReg_V_fu_358_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tagReg_V_fu_358_p4[ap_tvar_int_1] = i_addr_V[31 - ap_tvar_int_1];
        end
    end
end

assign tempValid_V_1_fu_591_p3 = ((sel_tmp17_fu_585_p2[0:0] === 1'b1) ? valid_V : sel_tmp16_fu_571_p3);

assign tmp4_fu_579_p2 = (tmp_13_fu_411_p3 & tmp_11_fu_395_p3);

assign tmp5_fu_657_p2 = (sel_tmp5_fu_493_p2 | sel_tmp3_fu_469_p2);

assign tmp6_fu_675_p2 = (tmp_11_fu_395_p3 | p_Result_2_not_fu_669_p2);

assign tmp7_fu_687_p2 = (sel_tmp19_demorgan_fu_551_p2 & not_sel_tmp_fu_681_p2);

assign tmp_10_1_fu_808_p2 = ((indexReg_V_reg_836 == 4'd1) ? 1'b1 : 1'b0);

assign tmp_10_2_fu_813_p2 = ((indexReg_V_reg_836 == 4'd2) ? 1'b1 : 1'b0);

assign tmp_10_3_fu_818_p2 = ((indexReg_V_reg_836 == 4'd3) ? 1'b1 : 1'b0);

assign tmp_10_fu_387_p3 = mruArray_V_q0[32'd1];

assign tmp_11_fu_395_p3 = valid_V[32'd1];

assign tmp_12_fu_403_p3 = mruArray_V_q0[32'd2];

assign tmp_13_fu_411_p3 = valid_V[32'd2];

assign tmp_14_fu_419_p3 = mruArray_V_q0[32'd3];

assign tmp_15_fu_435_p3 = valid_V[32'd3];

assign tmp_16_fu_717_p1 = Hi_assign_fu_645_p3[1:0];

assign tmp_17_fu_777_p1 = Hi_assign_reg_898[1:0];

assign tmp_1_fu_373_p2 = ((valid_V == 4'd15) ? 1'b1 : 1'b0);

assign tmp_2_fu_803_p2 = ((indexReg_V_reg_836 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_499_p2 = (sel_tmp7_fu_481_p2 | sel_tmp5_fu_493_p2);

assign tmp_4_fu_611_p2 = (sel_tmp5_fu_493_p2 | sel_tmp12_fu_537_p2);

assign tmp_5_fu_505_p2 = (tmp_3_fu_499_p2 | sel_tmp3_fu_469_p2);

assign tmp_7_fu_797_p2 = ((p_Result_2_fu_789_p4 == 4'd15) ? 1'b1 : 1'b0);

assign tmp_8_fu_379_p1 = mruArray_V_q0[0:0];

assign tmp_9_fu_383_p1 = valid_V[0:0];

assign tmp_cast_fu_741_p1 = p_Result_s_fu_735_p3;

assign tmp_fu_368_p1 = indexReg_V_fu_348_p4;

assign validArray_V_2_address0 = tmp_reg_853;

always @ (*) begin
    validArray_V_2_d0 = tempValid_V_1_reg_893;
    validArray_V_2_d0[Hi_assign_cast_reg_903] = |(4'd1);
end

always @ (posedge ap_clk) begin
    tmp_reg_853[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    Hi_assign_cast_reg_903[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //WriteMiss
