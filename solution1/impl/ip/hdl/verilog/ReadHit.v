// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ReadHit (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_addr_V,
        valid_V,
        tag_0_V_read,
        tag_1_V_read,
        tag_2_V_read,
        tag_3_V_read,
        dataArray_0_V_address0,
        dataArray_0_V_ce0,
        dataArray_0_V_q0,
        dataArray_1_V_address0,
        dataArray_1_V_ce0,
        dataArray_1_V_q0,
        dataArray_2_V_address0,
        dataArray_2_V_ce0,
        dataArray_2_V_q0,
        dataArray_3_V_address0,
        dataArray_3_V_ce0,
        dataArray_3_V_q0,
        mruArray_V_6_address0,
        mruArray_V_6_ce0,
        mruArray_V_6_we0,
        mruArray_V_6_d0,
        mruArray_V_6_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] i_addr_V;
input  [3:0] valid_V;
input  [27:0] tag_0_V_read;
input  [27:0] tag_1_V_read;
input  [27:0] tag_2_V_read;
input  [27:0] tag_3_V_read;
output  [3:0] dataArray_0_V_address0;
output   dataArray_0_V_ce0;
input  [511:0] dataArray_0_V_q0;
output  [3:0] dataArray_1_V_address0;
output   dataArray_1_V_ce0;
input  [511:0] dataArray_1_V_q0;
output  [3:0] dataArray_2_V_address0;
output   dataArray_2_V_ce0;
input  [511:0] dataArray_2_V_q0;
output  [3:0] dataArray_3_V_address0;
output   dataArray_3_V_ce0;
input  [511:0] dataArray_3_V_q0;
output  [3:0] mruArray_V_6_address0;
output   mruArray_V_6_ce0;
output   mruArray_V_6_we0;
output  [3:0] mruArray_V_6_d0;
input  [3:0] mruArray_V_6_q0;
output  [511:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dataArray_0_V_ce0;
reg dataArray_1_V_ce0;
reg dataArray_2_V_ce0;
reg dataArray_3_V_ce0;
reg[3:0] mruArray_V_6_address0;
reg mruArray_V_6_ce0;
reg mruArray_V_6_we0;
reg[511:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] indexReg_V_fu_173_p4;
reg   [3:0] indexReg_V_reg_396;
reg   [3:0] mruArray_V_5_addr_reg_404;
wire   [1:0] newSel2_fu_336_p3;
reg   [1:0] newSel2_reg_409;
wire   [63:0] tmp_fu_193_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_s_fu_357_p2;
reg   [27:0] tagReg_V_fu_183_p4;
wire   [0:0] tmp_38_fu_202_p1;
wire   [0:0] tmp_7_fu_206_p2;
wire   [0:0] tmp_39_fu_218_p3;
wire   [0:0] tmp_31_1_fu_226_p2;
wire   [0:0] tmp_41_fu_252_p3;
wire   [0:0] tmp_31_3_fu_260_p2;
wire   [0:0] or_cond_31_fu_212_p2;
wire   [0:0] or_cond4_fu_232_p2;
wire   [0:0] sel_tmp1_fu_272_p2;
wire   [0:0] sel_tmp6_demorgan_fu_284_p2;
wire   [0:0] tmp_31_2_fu_246_p2;
wire   [0:0] sel_tmp6_fu_290_p2;
wire   [0:0] tmp9_fu_296_p2;
wire   [0:0] tmp_40_fu_238_p3;
wire   [0:0] sel_tmp7_fu_302_p2;
wire   [0:0] sel_tmp2_fu_278_p2;
wire   [0:0] or_cond6_fu_266_p2;
wire   [0:0] newSel1_fu_322_p2;
wire   [0:0] or_cond_fu_316_p2;
wire   [1:0] newSel_fu_308_p3;
wire   [1:0] newSel10_cast_fu_328_p3;
wire   [0:0] tmp_35_3_fu_378_p2;
wire   [0:0] tmp_35_2_fu_373_p2;
wire   [0:0] tmp_35_1_fu_368_p2;
wire   [0:0] tmp_8_fu_363_p2;
wire   [511:0] res_V_fu_344_p6;
reg   [511:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 512'd0;
end

PLRUCache_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 512 ),
    .din2_WIDTH( 512 ),
    .din3_WIDTH( 512 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 512 ))
PLRUCache_mux_42_bkb_U1(
    .din0(dataArray_0_V_q0),
    .din1(dataArray_1_V_q0),
    .din2(dataArray_2_V_q0),
    .din3(dataArray_3_V_q0),
    .din4(newSel2_reg_409),
    .dout(res_V_fu_344_p6)
);

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 512'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= res_V_fu_344_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indexReg_V_reg_396 <= indexReg_V_fu_173_p4;
        mruArray_V_5_addr_reg_404 <= tmp_fu_193_p1;
        newSel2_reg_409 <= newSel2_fu_336_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = res_V_fu_344_p6;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dataArray_0_V_ce0 = 1'b1;
    end else begin
        dataArray_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dataArray_1_V_ce0 = 1'b1;
    end else begin
        dataArray_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dataArray_2_V_ce0 = 1'b1;
    end else begin
        dataArray_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dataArray_3_V_ce0 = 1'b1;
    end else begin
        dataArray_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mruArray_V_6_address0 = mruArray_V_5_addr_reg_404;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        mruArray_V_6_address0 = tmp_fu_193_p1;
    end else begin
        mruArray_V_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        mruArray_V_6_ce0 = 1'b1;
    end else begin
        mruArray_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_s_fu_357_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        mruArray_V_6_we0 = 1'b1;
    end else begin
        mruArray_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign dataArray_0_V_address0 = tmp_fu_193_p1;

assign dataArray_1_V_address0 = tmp_fu_193_p1;

assign dataArray_2_V_address0 = tmp_fu_193_p1;

assign dataArray_3_V_address0 = tmp_fu_193_p1;

integer ap_tvar_int_0;

always @ (i_addr_V) begin
    for (ap_tvar_int_0 = 4 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 3 - 0) begin
            indexReg_V_fu_173_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            indexReg_V_fu_173_p4[ap_tvar_int_0] = i_addr_V[3 - ap_tvar_int_0];
        end
    end
end

assign mruArray_V_6_d0 = {{{{tmp_35_3_fu_378_p2}, {tmp_35_2_fu_373_p2}}, {tmp_35_1_fu_368_p2}}, {tmp_8_fu_363_p2}};

assign newSel10_cast_fu_328_p3 = ((newSel1_fu_322_p2[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign newSel1_fu_322_p2 = (sel_tmp1_fu_272_p2 & or_cond6_fu_266_p2);

assign newSel2_fu_336_p3 = ((or_cond_fu_316_p2[0:0] === 1'b1) ? newSel_fu_308_p3 : newSel10_cast_fu_328_p3);

assign newSel_fu_308_p3 = ((sel_tmp7_fu_302_p2[0:0] === 1'b1) ? 2'd2 : 2'd1);

assign or_cond4_fu_232_p2 = (tmp_39_fu_218_p3 & tmp_31_1_fu_226_p2);

assign or_cond6_fu_266_p2 = (tmp_41_fu_252_p3 & tmp_31_3_fu_260_p2);

assign or_cond_31_fu_212_p2 = (tmp_7_fu_206_p2 & tmp_38_fu_202_p1);

assign or_cond_fu_316_p2 = (sel_tmp7_fu_302_p2 | sel_tmp2_fu_278_p2);

assign sel_tmp1_fu_272_p2 = (or_cond_31_fu_212_p2 ^ 1'd1);

assign sel_tmp2_fu_278_p2 = (sel_tmp1_fu_272_p2 & or_cond4_fu_232_p2);

assign sel_tmp6_demorgan_fu_284_p2 = (or_cond_31_fu_212_p2 | or_cond4_fu_232_p2);

assign sel_tmp6_fu_290_p2 = (sel_tmp6_demorgan_fu_284_p2 ^ 1'd1);

assign sel_tmp7_fu_302_p2 = (tmp_40_fu_238_p3 & tmp9_fu_296_p2);

integer ap_tvar_int_1;

always @ (i_addr_V) begin
    for (ap_tvar_int_1 = 28 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 4) begin
            tagReg_V_fu_183_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tagReg_V_fu_183_p4[ap_tvar_int_1] = i_addr_V[31 - ap_tvar_int_1];
        end
    end
end

assign tmp9_fu_296_p2 = (tmp_31_2_fu_246_p2 & sel_tmp6_fu_290_p2);

assign tmp_31_1_fu_226_p2 = ((tagReg_V_fu_183_p4 == tag_1_V_read) ? 1'b1 : 1'b0);

assign tmp_31_2_fu_246_p2 = ((tagReg_V_fu_183_p4 == tag_2_V_read) ? 1'b1 : 1'b0);

assign tmp_31_3_fu_260_p2 = ((tagReg_V_fu_183_p4 == tag_3_V_read) ? 1'b1 : 1'b0);

assign tmp_35_1_fu_368_p2 = ((indexReg_V_reg_396 == 4'd1) ? 1'b1 : 1'b0);

assign tmp_35_2_fu_373_p2 = ((indexReg_V_reg_396 == 4'd2) ? 1'b1 : 1'b0);

assign tmp_35_3_fu_378_p2 = ((indexReg_V_reg_396 == 4'd3) ? 1'b1 : 1'b0);

assign tmp_38_fu_202_p1 = valid_V[0:0];

assign tmp_39_fu_218_p3 = valid_V[32'd1];

assign tmp_40_fu_238_p3 = valid_V[32'd2];

assign tmp_41_fu_252_p3 = valid_V[32'd3];

assign tmp_7_fu_206_p2 = ((tagReg_V_fu_183_p4 == tag_0_V_read) ? 1'b1 : 1'b0);

assign tmp_8_fu_363_p2 = ((indexReg_V_reg_396 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_fu_193_p1 = indexReg_V_fu_173_p4;

assign tmp_s_fu_357_p2 = ((mruArray_V_6_q0 == 4'd15) ? 1'b1 : 1'b0);

endmodule //ReadHit
