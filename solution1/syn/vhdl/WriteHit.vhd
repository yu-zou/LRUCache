-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity WriteHit is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_addr_V : IN STD_LOGIC_VECTOR (31 downto 0);
    i_wdata_V : IN STD_LOGIC_VECTOR (511 downto 0);
    valid_V : IN STD_LOGIC_VECTOR (7 downto 0);
    tag_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_4_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_5_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_6_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_7_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    dataArray_0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_0_V_ce0 : OUT STD_LOGIC;
    dataArray_0_V_we0 : OUT STD_LOGIC;
    dataArray_0_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_1_V_ce0 : OUT STD_LOGIC;
    dataArray_1_V_we0 : OUT STD_LOGIC;
    dataArray_1_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_2_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_2_V_ce0 : OUT STD_LOGIC;
    dataArray_2_V_we0 : OUT STD_LOGIC;
    dataArray_2_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_3_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_3_V_ce0 : OUT STD_LOGIC;
    dataArray_3_V_we0 : OUT STD_LOGIC;
    dataArray_3_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_4_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_4_V_ce0 : OUT STD_LOGIC;
    dataArray_4_V_we0 : OUT STD_LOGIC;
    dataArray_4_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_5_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_5_V_ce0 : OUT STD_LOGIC;
    dataArray_5_V_we0 : OUT STD_LOGIC;
    dataArray_5_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_6_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_6_V_ce0 : OUT STD_LOGIC;
    dataArray_6_V_we0 : OUT STD_LOGIC;
    dataArray_6_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_7_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_7_V_ce0 : OUT STD_LOGIC;
    dataArray_7_V_we0 : OUT STD_LOGIC;
    dataArray_7_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    mruArray_V_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mruArray_V_2_ce0 : OUT STD_LOGIC;
    mruArray_V_2_we0 : OUT STD_LOGIC;
    mruArray_V_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mruArray_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of WriteHit is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indexReg_V_fu_323_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal indexReg_V_reg_774 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_786 : STD_LOGIC_VECTOR (63 downto 0);
    signal mruArray_V_1_addr_reg_798 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond3_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_803 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_fu_622_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sel_tmp10_reg_808 : STD_LOGIC_VECTOR (3 downto 0);
    signal sel_tmp33_demorgan_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp33_demorgan_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_693_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tagReg_V_fu_333_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_24_fu_348_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_1_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_384_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_2_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_404_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_3_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_424_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_4_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_444_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_5_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_478_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_7_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond5_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_fu_498_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_cond8_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond9_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_cast_fu_550_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sel_tmp_fu_512_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sel_tmp13_demorgan_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp22_demorgan_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_cast_fu_608_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sel_tmp8_fu_564_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sel_tmp46_demorgan_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_6_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_464_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp17_cast_fu_670_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal evictWay_lcssa_fu_682_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal evictWay_lcssa_cast_fu_689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_697_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_assign_7_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_6_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_5_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_4_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_3_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_2_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_1_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            ap_CS_fsm <= ap_ST_fsm_state1;
        elsif (ap_clk'event and ap_clk =  '1') then
            ap_CS_fsm <= ap_NS_fsm;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                indexReg_V_reg_774 <= indexReg_V_fu_323_p4;
                mruArray_V_1_addr_reg_798 <= tmp_fu_343_p1(8 - 1 downto 0);
                or_cond3_reg_803 <= or_cond3_fu_458_p2;
                sel_tmp10_reg_808 <= sel_tmp10_fu_622_p3;
                sel_tmp14_reg_818 <= sel_tmp14_fu_654_p2;
                sel_tmp33_demorgan_reg_813 <= sel_tmp33_demorgan_fu_630_p2;
                    tmp_reg_786(7 downto 0) <= tmp_fu_343_p1(7 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_786(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_0_V_address0 <= tmp_reg_786(8 - 1 downto 0);

    dataArray_0_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dataArray_0_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_0_V_d0 <= i_wdata_V;

    dataArray_0_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_32_fu_693_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_32_fu_693_p1 = ap_const_lv3_0))) then 
            dataArray_0_V_we0 <= ap_const_logic_1;
        else 
            dataArray_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_1_V_address0 <= tmp_reg_786(8 - 1 downto 0);

    dataArray_1_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dataArray_1_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_1_V_d0 <= i_wdata_V;

    dataArray_1_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_32_fu_693_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_32_fu_693_p1 = ap_const_lv3_1))) then 
            dataArray_1_V_we0 <= ap_const_logic_1;
        else 
            dataArray_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_2_V_address0 <= tmp_reg_786(8 - 1 downto 0);

    dataArray_2_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dataArray_2_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_2_V_d0 <= i_wdata_V;

    dataArray_2_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_32_fu_693_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_32_fu_693_p1 = ap_const_lv3_2))) then 
            dataArray_2_V_we0 <= ap_const_logic_1;
        else 
            dataArray_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_3_V_address0 <= tmp_reg_786(8 - 1 downto 0);

    dataArray_3_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dataArray_3_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_3_V_d0 <= i_wdata_V;

    dataArray_3_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_32_fu_693_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_32_fu_693_p1 = ap_const_lv3_3))) then 
            dataArray_3_V_we0 <= ap_const_logic_1;
        else 
            dataArray_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_4_V_address0 <= tmp_reg_786(8 - 1 downto 0);

    dataArray_4_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dataArray_4_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_4_V_d0 <= i_wdata_V;

    dataArray_4_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_32_fu_693_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_32_fu_693_p1 = ap_const_lv3_4))) then 
            dataArray_4_V_we0 <= ap_const_logic_1;
        else 
            dataArray_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_5_V_address0 <= tmp_reg_786(8 - 1 downto 0);

    dataArray_5_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dataArray_5_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_5_V_d0 <= i_wdata_V;

    dataArray_5_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_32_fu_693_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_32_fu_693_p1 = ap_const_lv3_5))) then 
            dataArray_5_V_we0 <= ap_const_logic_1;
        else 
            dataArray_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_6_V_address0 <= tmp_reg_786(8 - 1 downto 0);

    dataArray_6_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dataArray_6_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_6_V_d0 <= i_wdata_V;

    dataArray_6_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_32_fu_693_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_32_fu_693_p1 = ap_const_lv3_6))) then 
            dataArray_6_V_we0 <= ap_const_logic_1;
        else 
            dataArray_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_7_V_address0 <= tmp_reg_786(8 - 1 downto 0);

    dataArray_7_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dataArray_7_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_7_V_d0 <= i_wdata_V;

    dataArray_7_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_32_fu_693_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_32_fu_693_p1 = ap_const_lv3_7))) then 
            dataArray_7_V_we0 <= ap_const_logic_1;
        else 
            dataArray_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    evictWay_lcssa_cast_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(evictWay_lcssa_fu_682_p3),32));
    evictWay_lcssa_fu_682_p3 <= 
        sel_tmp17_cast_fu_670_p3 when (tmp_8_fu_677_p2(0) = '1') else 
        sel_tmp10_reg_808;
    
    indexReg_V_fu_323_p4_proc : process(i_addr_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable indexReg_V_fu_323_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_7(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := i_addr_V;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_7(5-1 downto 0)));
            for indexReg_V_fu_323_p4_i in 0 to 32-1 loop
                v0_cpy(indexReg_V_fu_323_p4_i) := i_addr_V(32-1-indexReg_V_fu_323_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        indexReg_V_fu_323_p4 <= resvalue(8-1 downto 0);
    end process;


    mruArray_V_2_address0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_343_p1, mruArray_V_1_addr_reg_798, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mruArray_V_2_address0 <= mruArray_V_1_addr_reg_798;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            mruArray_V_2_address0 <= tmp_fu_343_p1(8 - 1 downto 0);
        else 
            mruArray_V_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mruArray_V_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            mruArray_V_2_ce0 <= ap_const_logic_1;
        else 
            mruArray_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mruArray_V_2_d0 <= (((((((val_assign_7_fu_748_p2 & val_assign_6_fu_743_p2) & val_assign_5_fu_738_p2) & val_assign_4_fu_733_p2) & val_assign_3_fu_728_p2) & val_assign_2_fu_723_p2) & val_assign_1_fu_718_p2) & val_assign_fu_713_p2);

    mruArray_V_2_we0_assign_proc : process(ap_CS_fsm_state2, tmp_s_fu_707_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_707_p2 = ap_const_lv1_1))) then 
            mruArray_V_2_we0 <= ap_const_logic_1;
        else 
            mruArray_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond1_fu_418_p2 <= (tmp_27_fu_404_p3 and tmp_10_3_fu_412_p2);
    or_cond2_fu_438_p2 <= (tmp_28_fu_424_p3 and tmp_10_4_fu_432_p2);
    or_cond3_fu_458_p2 <= (tmp_29_fu_444_p3 and tmp_10_5_fu_452_p2);
    or_cond5_fu_492_p2 <= (tmp_31_fu_478_p3 and tmp_10_7_fu_486_p2);
    or_cond8_fu_378_p2 <= (tmp_25_fu_364_p3 and tmp_10_1_fu_372_p2);
    or_cond9_fu_398_p2 <= (tmp_26_fu_384_p3 and tmp_10_2_fu_392_p2);
    or_cond_fu_358_p2 <= (tmp_24_fu_348_p1 and tmp_1_fu_352_p2);
    
    p_Result_s_fu_697_p4_proc : process(mruArray_V_2_q0, evictWay_lcssa_cast_fu_689_p1)
    variable result: std_logic_vector(0 downto 0);
    begin
        p_Result_s_fu_697_p4 <= mruArray_V_2_q0;
        if to_integer(unsigned(evictWay_lcssa_cast_fu_689_p1)) >= mruArray_V_2_q0'low and to_integer(unsigned(evictWay_lcssa_cast_fu_689_p1)) <= mruArray_V_2_q0'high then
            result(0) := '0';
            for i in ap_const_lv8_1'range loop
                result(0) := result(0) or ap_const_lv8_1(i);
            end loop;
            p_Result_s_fu_697_p4(to_integer(unsigned(evictWay_lcssa_cast_fu_689_p1))) <= result(0);
        end if;
    end process;

    p_cast_fu_498_p3 <= 
        ap_const_lv4_0 when (or_cond_fu_358_p2(0) = '1') else 
        ap_const_lv4_7;
    sel_tmp10_fu_622_p3 <= 
        sel_tmp11_cast_fu_608_p3 when (tmp_6_fu_616_p2(0) = '1') else 
        sel_tmp8_fu_564_p3;
    sel_tmp11_cast_fu_608_p3 <= 
        ap_const_lv4_4 when (sel_tmp3_fu_602_p2(0) = '1') else 
        ap_const_lv4_3;
    sel_tmp11_fu_660_p2 <= (sel_tmp33_demorgan_reg_813 xor ap_const_lv1_1);
    sel_tmp12_fu_665_p2 <= (sel_tmp11_fu_660_p2 and or_cond3_reg_803);
    sel_tmp13_demorgan_fu_572_p2 <= (sel_tmp6_demorgan_fu_532_p2 or or_cond9_fu_398_p2);
    sel_tmp13_fu_642_p2 <= (sel_tmp46_demorgan_fu_636_p2 xor ap_const_lv1_1);
    sel_tmp14_fu_654_p2 <= (tmp_30_fu_464_p3 and tmp7_fu_648_p2);
    sel_tmp17_cast_fu_670_p3 <= 
        ap_const_lv4_6 when (sel_tmp14_reg_818(0) = '1') else 
        ap_const_lv4_5;
    sel_tmp1_fu_520_p2 <= (or_cond_fu_358_p2 xor ap_const_lv1_1);
    sel_tmp22_demorgan_fu_590_p2 <= (sel_tmp13_demorgan_fu_572_p2 or or_cond1_fu_418_p2);
    sel_tmp2_fu_526_p2 <= (sel_tmp1_fu_520_p2 and or_cond8_fu_378_p2);
    sel_tmp33_demorgan_fu_630_p2 <= (sel_tmp22_demorgan_fu_590_p2 or or_cond2_fu_438_p2);
    sel_tmp3_cast_fu_550_p3 <= 
        ap_const_lv4_2 when (sel_tmp7_fu_544_p2(0) = '1') else 
        ap_const_lv4_1;
    sel_tmp3_fu_602_p2 <= (sel_tmp9_fu_596_p2 and or_cond2_fu_438_p2);
    sel_tmp46_demorgan_fu_636_p2 <= (sel_tmp33_demorgan_fu_630_p2 or or_cond3_fu_458_p2);
    sel_tmp4_fu_578_p2 <= (sel_tmp13_demorgan_fu_572_p2 xor ap_const_lv1_1);
    sel_tmp5_fu_584_p2 <= (sel_tmp4_fu_578_p2 and or_cond1_fu_418_p2);
    sel_tmp6_demorgan_fu_532_p2 <= (or_cond_fu_358_p2 or or_cond8_fu_378_p2);
    sel_tmp6_fu_538_p2 <= (sel_tmp6_demorgan_fu_532_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_544_p2 <= (sel_tmp6_fu_538_p2 and or_cond9_fu_398_p2);
    sel_tmp8_fu_564_p3 <= 
        sel_tmp3_cast_fu_550_p3 when (tmp_5_fu_558_p2(0) = '1') else 
        sel_tmp_fu_512_p3;
    sel_tmp9_fu_596_p2 <= (sel_tmp22_demorgan_fu_590_p2 xor ap_const_lv1_1);
    sel_tmp_fu_512_p3 <= 
        p_cast_fu_498_p3 when (tmp_4_fu_506_p2(0) = '1') else 
        ap_const_lv4_8;
    
    tagReg_V_fu_333_p4_proc : process(i_addr_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tagReg_V_fu_333_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_8(5 - 1 downto 0);
        v0_cpy := i_addr_V;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_8(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tagReg_V_fu_333_p4_i in 0 to 32-1 loop
                v0_cpy(tagReg_V_fu_333_p4_i) := i_addr_V(32-1-tagReg_V_fu_333_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tagReg_V_fu_333_p4 <= resvalue(24-1 downto 0);
    end process;

    tmp7_fu_648_p2 <= (tmp_10_6_fu_472_p2 and sel_tmp13_fu_642_p2);
    tmp_10_1_fu_372_p2 <= "1" when (tagReg_V_fu_333_p4 = tag_1_V_read) else "0";
    tmp_10_2_fu_392_p2 <= "1" when (tagReg_V_fu_333_p4 = tag_2_V_read) else "0";
    tmp_10_3_fu_412_p2 <= "1" when (tagReg_V_fu_333_p4 = tag_3_V_read) else "0";
    tmp_10_4_fu_432_p2 <= "1" when (tagReg_V_fu_333_p4 = tag_4_V_read) else "0";
    tmp_10_5_fu_452_p2 <= "1" when (tagReg_V_fu_333_p4 = tag_5_V_read) else "0";
    tmp_10_6_fu_472_p2 <= "1" when (tagReg_V_fu_333_p4 = tag_6_V_read) else "0";
    tmp_10_7_fu_486_p2 <= "1" when (tagReg_V_fu_333_p4 = tag_7_V_read) else "0";
    tmp_1_fu_352_p2 <= "1" when (tagReg_V_fu_333_p4 = tag_0_V_read) else "0";
    tmp_24_fu_348_p1 <= valid_V(1 - 1 downto 0);
    tmp_25_fu_364_p3 <= valid_V(1 downto 1);
    tmp_26_fu_384_p3 <= valid_V(2 downto 2);
    tmp_27_fu_404_p3 <= valid_V(3 downto 3);
    tmp_28_fu_424_p3 <= valid_V(4 downto 4);
    tmp_29_fu_444_p3 <= valid_V(5 downto 5);
    tmp_30_fu_464_p3 <= valid_V(6 downto 6);
    tmp_31_fu_478_p3 <= valid_V(7 downto 7);
    tmp_32_fu_693_p1 <= evictWay_lcssa_fu_682_p3(3 - 1 downto 0);
    tmp_4_fu_506_p2 <= (or_cond_fu_358_p2 or or_cond5_fu_492_p2);
    tmp_5_fu_558_p2 <= (sel_tmp7_fu_544_p2 or sel_tmp2_fu_526_p2);
    tmp_6_fu_616_p2 <= (sel_tmp5_fu_584_p2 or sel_tmp3_fu_602_p2);
    tmp_8_fu_677_p2 <= (sel_tmp14_reg_818 or sel_tmp12_fu_665_p2);
    tmp_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indexReg_V_fu_323_p4),64));
    tmp_s_fu_707_p2 <= "1" when (p_Result_s_fu_697_p4 = ap_const_lv8_FF) else "0";
    val_assign_1_fu_718_p2 <= "1" when (indexReg_V_reg_774 = ap_const_lv8_1) else "0";
    val_assign_2_fu_723_p2 <= "1" when (indexReg_V_reg_774 = ap_const_lv8_2) else "0";
    val_assign_3_fu_728_p2 <= "1" when (indexReg_V_reg_774 = ap_const_lv8_3) else "0";
    val_assign_4_fu_733_p2 <= "1" when (indexReg_V_reg_774 = ap_const_lv8_4) else "0";
    val_assign_5_fu_738_p2 <= "1" when (indexReg_V_reg_774 = ap_const_lv8_5) else "0";
    val_assign_6_fu_743_p2 <= "1" when (indexReg_V_reg_774 = ap_const_lv8_6) else "0";
    val_assign_7_fu_748_p2 <= "1" when (indexReg_V_reg_774 = ap_const_lv8_7) else "0";
    val_assign_fu_713_p2 <= "1" when (indexReg_V_reg_774 = ap_const_lv8_0) else "0";
end behav;
