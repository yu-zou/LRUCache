-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ReadHit is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_addr_V : IN STD_LOGIC_VECTOR (31 downto 0);
    valid_V : IN STD_LOGIC_VECTOR (7 downto 0);
    tag_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_4_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_5_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_6_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_7_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    dataArray_0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_0_V_ce0 : OUT STD_LOGIC;
    dataArray_0_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_1_V_ce0 : OUT STD_LOGIC;
    dataArray_1_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_2_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_2_V_ce0 : OUT STD_LOGIC;
    dataArray_2_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_3_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_3_V_ce0 : OUT STD_LOGIC;
    dataArray_3_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_4_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_4_V_ce0 : OUT STD_LOGIC;
    dataArray_4_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_5_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_5_V_ce0 : OUT STD_LOGIC;
    dataArray_5_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_6_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_6_V_ce0 : OUT STD_LOGIC;
    dataArray_6_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_7_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_7_V_ce0 : OUT STD_LOGIC;
    dataArray_7_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    mruArray_V_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mruArray_V_6_ce0 : OUT STD_LOGIC;
    mruArray_V_6_we0 : OUT STD_LOGIC;
    mruArray_V_6_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mruArray_V_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (511 downto 0) );
end;


architecture behav of ReadHit is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indexReg_V_fu_288_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal indexReg_V_reg_745 : STD_LOGIC_VECTOR (7 downto 0);
    signal mruArray_V_5_addr_reg_757 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond6_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_reg_762 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_48_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_48_reg_767 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_demorgan_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_demorgan_reg_772 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp15_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp15_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp33_demorgan_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp33_demorgan_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp19_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp19_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel4_fu_583_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal newSel4_reg_794 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tagReg_V_fu_298_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_54_fu_321_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_337_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_1_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_357_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_2_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_377_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_3_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_397_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_4_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_417_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_5_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_451_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_7_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_47_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond8_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond9_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp22_demorgan_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp46_demorgan_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_6_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp18_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_437_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_49_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel52_cast_cast_fu_555_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal newSel54_cast_fu_575_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp13_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp16_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp17_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_611_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal newSel1_fu_623_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_cond1_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel3_fu_635_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_656_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal val_assign_7_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_6_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_5_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_4_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_3_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_2_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_1_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_656_p10 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component PLRUCache_mux_83_512_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (511 downto 0);
        din2 : IN STD_LOGIC_VECTOR (511 downto 0);
        din3 : IN STD_LOGIC_VECTOR (511 downto 0);
        din4 : IN STD_LOGIC_VECTOR (511 downto 0);
        din5 : IN STD_LOGIC_VECTOR (511 downto 0);
        din6 : IN STD_LOGIC_VECTOR (511 downto 0);
        din7 : IN STD_LOGIC_VECTOR (511 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;



begin
    PLRUCache_mux_83_512_2_1_U1 : component PLRUCache_mux_83_512_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 512,
        din1_WIDTH => 512,
        din2_WIDTH => 512,
        din3_WIDTH => 512,
        din4_WIDTH => 512,
        din5_WIDTH => 512,
        din6_WIDTH => 512,
        din7_WIDTH => 512,
        din8_WIDTH => 3,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dataArray_0_V_q0,
        din1 => dataArray_1_V_q0,
        din2 => dataArray_2_V_q0,
        din3 => dataArray_3_V_q0,
        din4 => dataArray_4_V_q0,
        din5 => dataArray_5_V_q0,
        din6 => dataArray_6_V_q0,
        din7 => dataArray_7_V_q0,
        din8 => grp_fu_656_p9,
        ce => ap_const_logic_1,
        dout => grp_fu_656_p10);





    ap_CS_fsm_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            ap_CS_fsm <= ap_ST_fsm_state1;
        elsif (ap_clk'event and ap_clk =  '1') then
            ap_CS_fsm <= ap_NS_fsm;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            ap_return_preg <= ap_const_lv512_lc_1;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ap_return_preg <= grp_fu_656_p10;
            end if; 
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                indexReg_V_reg_745 <= indexReg_V_fu_288_p4;
                mruArray_V_5_addr_reg_757 <= tmp_fu_308_p1(8 - 1 downto 0);
                newSel4_reg_794 <= newSel4_fu_583_p3;
                or_cond1_48_reg_767 <= or_cond1_48_fu_431_p2;
                or_cond6_reg_762 <= or_cond6_fu_391_p2;
                sel_tmp13_demorgan_reg_772 <= sel_tmp13_demorgan_fu_501_p2;
                sel_tmp15_reg_777 <= sel_tmp15_fu_519_p2;
                sel_tmp19_reg_788 <= sel_tmp19_fu_549_p2;
                sel_tmp33_demorgan_reg_783 <= sel_tmp33_demorgan_fu_525_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state3, grp_fu_656_p10, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return <= grp_fu_656_p10;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    dataArray_0_V_address0 <= tmp_fu_308_p1(8 - 1 downto 0);

    dataArray_0_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dataArray_0_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_1_V_address0 <= tmp_fu_308_p1(8 - 1 downto 0);

    dataArray_1_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dataArray_1_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_2_V_address0 <= tmp_fu_308_p1(8 - 1 downto 0);

    dataArray_2_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dataArray_2_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_3_V_address0 <= tmp_fu_308_p1(8 - 1 downto 0);

    dataArray_3_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dataArray_3_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_4_V_address0 <= tmp_fu_308_p1(8 - 1 downto 0);

    dataArray_4_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dataArray_4_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_5_V_address0 <= tmp_fu_308_p1(8 - 1 downto 0);

    dataArray_5_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dataArray_5_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_6_V_address0 <= tmp_fu_308_p1(8 - 1 downto 0);

    dataArray_6_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dataArray_6_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_7_V_address0 <= tmp_fu_308_p1(8 - 1 downto 0);

    dataArray_7_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dataArray_7_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_656_p9 <= 
        newSel3_fu_635_p3 when (or_cond3_fu_643_p2(0) = '1') else 
        newSel4_reg_794;
    
    indexReg_V_fu_288_p4_proc : process(i_addr_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable indexReg_V_fu_288_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_7(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := i_addr_V;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_7(5-1 downto 0)));
            for indexReg_V_fu_288_p4_i in 0 to 32-1 loop
                v0_cpy(indexReg_V_fu_288_p4_i) := i_addr_V(32-1-indexReg_V_fu_288_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        indexReg_V_fu_288_p4 <= resvalue(8-1 downto 0);
    end process;

    mruArray_V_6_address0 <= mruArray_V_5_addr_reg_757;

    mruArray_V_6_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mruArray_V_6_ce0 <= ap_const_logic_1;
        else 
            mruArray_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mruArray_V_6_d0 <= (((((((val_assign_7_fu_719_p2 & val_assign_6_fu_714_p2) & val_assign_5_fu_709_p2) & val_assign_4_fu_704_p2) & val_assign_3_fu_699_p2) & val_assign_2_fu_694_p2) & val_assign_1_fu_689_p2) & val_assign_fu_684_p2);

    mruArray_V_6_we0_assign_proc : process(ap_CS_fsm_state3, tmp_s_fu_678_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_s_fu_678_p2 = ap_const_lv1_1))) then 
            mruArray_V_6_we0 <= ap_const_logic_1;
        else 
            mruArray_V_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    newSel1_fu_623_p3 <= 
        ap_const_lv3_4 when (sel_tmp15_reg_777(0) = '1') else 
        ap_const_lv3_3;
    newSel2_fu_569_p2 <= (sel_tmp1_fu_471_p2 and or_cond3_49_fu_465_p2);
    newSel3_fu_635_p3 <= 
        newSel_fu_611_p3 when (or_cond_fu_618_p2(0) = '1') else 
        newSel1_fu_623_p3;
    newSel4_fu_583_p3 <= 
        newSel52_cast_cast_fu_555_p3 when (or_cond2_fu_563_p2(0) = '1') else 
        newSel54_cast_fu_575_p3;
    newSel52_cast_cast_fu_555_p3 <= 
        ap_const_lv3_2 when (sel_tmp7_fu_495_p2(0) = '1') else 
        ap_const_lv3_1;
    newSel54_cast_fu_575_p3 <= 
        ap_const_lv3_7 when (newSel2_fu_569_p2(0) = '1') else 
        ap_const_lv3_0;
    newSel_fu_611_p3 <= 
        ap_const_lv3_6 when (sel_tmp19_reg_788(0) = '1') else 
        ap_const_lv3_5;
    or_cond1_48_fu_431_p2 <= (tmp_59_fu_417_p3 and tmp_26_5_fu_425_p2);
    or_cond1_fu_630_p2 <= (sel_tmp15_reg_777 or sel_tmp14_fu_596_p2);
    or_cond2_fu_563_p2 <= (sel_tmp7_fu_495_p2 or sel_tmp2_fu_477_p2);
    or_cond3_49_fu_465_p2 <= (tmp_61_fu_451_p3 and tmp_26_7_fu_459_p2);
    or_cond3_fu_643_p2 <= (or_cond_fu_618_p2 or or_cond1_fu_630_p2);
    or_cond6_fu_391_p2 <= (tmp_57_fu_377_p3 and tmp_26_3_fu_385_p2);
    or_cond7_fu_411_p2 <= (tmp_58_fu_397_p3 and tmp_26_4_fu_405_p2);
    or_cond8_fu_351_p2 <= (tmp_55_fu_337_p3 and tmp_26_1_fu_345_p2);
    or_cond9_fu_371_p2 <= (tmp_56_fu_357_p3 and tmp_26_2_fu_365_p2);
    or_cond_47_fu_331_p2 <= (tmp_54_fu_321_p1 and tmp_2_fu_325_p2);
    or_cond_fu_618_p2 <= (sel_tmp19_reg_788 or sel_tmp17_fu_606_p2);
    sel_tmp13_demorgan_fu_501_p2 <= (sel_tmp6_demorgan_fu_483_p2 or or_cond9_fu_371_p2);
    sel_tmp13_fu_591_p2 <= (sel_tmp13_demorgan_reg_772 xor ap_const_lv1_1);
    sel_tmp14_fu_596_p2 <= (sel_tmp13_fu_591_p2 and or_cond6_reg_762);
    sel_tmp15_fu_519_p2 <= (sel_tmp_fu_513_p2 and or_cond7_fu_411_p2);
    sel_tmp16_fu_601_p2 <= (sel_tmp33_demorgan_reg_783 xor ap_const_lv1_1);
    sel_tmp17_fu_606_p2 <= (sel_tmp16_fu_601_p2 and or_cond1_48_reg_767);
    sel_tmp18_fu_537_p2 <= (sel_tmp46_demorgan_fu_531_p2 xor ap_const_lv1_1);
    sel_tmp19_fu_549_p2 <= (tmp_60_fu_437_p3 and tmp1_fu_543_p2);
    sel_tmp1_fu_471_p2 <= (or_cond_47_fu_331_p2 xor ap_const_lv1_1);
    sel_tmp22_demorgan_fu_507_p2 <= (sel_tmp13_demorgan_fu_501_p2 or or_cond6_fu_391_p2);
    sel_tmp2_fu_477_p2 <= (sel_tmp1_fu_471_p2 and or_cond8_fu_351_p2);
    sel_tmp33_demorgan_fu_525_p2 <= (sel_tmp22_demorgan_fu_507_p2 or or_cond7_fu_411_p2);
    sel_tmp46_demorgan_fu_531_p2 <= (sel_tmp33_demorgan_fu_525_p2 or or_cond1_48_fu_431_p2);
    sel_tmp6_demorgan_fu_483_p2 <= (or_cond_47_fu_331_p2 or or_cond8_fu_351_p2);
    sel_tmp6_fu_489_p2 <= (sel_tmp6_demorgan_fu_483_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_495_p2 <= (sel_tmp6_fu_489_p2 and or_cond9_fu_371_p2);
    sel_tmp_fu_513_p2 <= (sel_tmp22_demorgan_fu_507_p2 xor ap_const_lv1_1);
    
    tagReg_V_fu_298_p4_proc : process(i_addr_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tagReg_V_fu_298_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_8(5 - 1 downto 0);
        v0_cpy := i_addr_V;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_8(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tagReg_V_fu_298_p4_i in 0 to 32-1 loop
                v0_cpy(tagReg_V_fu_298_p4_i) := i_addr_V(32-1-tagReg_V_fu_298_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tagReg_V_fu_298_p4 <= resvalue(24-1 downto 0);
    end process;

    tmp1_fu_543_p2 <= (tmp_26_6_fu_445_p2 and sel_tmp18_fu_537_p2);
    tmp_26_1_fu_345_p2 <= "1" when (tagReg_V_fu_298_p4 = tag_1_V_read) else "0";
    tmp_26_2_fu_365_p2 <= "1" when (tagReg_V_fu_298_p4 = tag_2_V_read) else "0";
    tmp_26_3_fu_385_p2 <= "1" when (tagReg_V_fu_298_p4 = tag_3_V_read) else "0";
    tmp_26_4_fu_405_p2 <= "1" when (tagReg_V_fu_298_p4 = tag_4_V_read) else "0";
    tmp_26_5_fu_425_p2 <= "1" when (tagReg_V_fu_298_p4 = tag_5_V_read) else "0";
    tmp_26_6_fu_445_p2 <= "1" when (tagReg_V_fu_298_p4 = tag_6_V_read) else "0";
    tmp_26_7_fu_459_p2 <= "1" when (tagReg_V_fu_298_p4 = tag_7_V_read) else "0";
    tmp_2_fu_325_p2 <= "1" when (tagReg_V_fu_298_p4 = tag_0_V_read) else "0";
    tmp_54_fu_321_p1 <= valid_V(1 - 1 downto 0);
    tmp_55_fu_337_p3 <= valid_V(1 downto 1);
    tmp_56_fu_357_p3 <= valid_V(2 downto 2);
    tmp_57_fu_377_p3 <= valid_V(3 downto 3);
    tmp_58_fu_397_p3 <= valid_V(4 downto 4);
    tmp_59_fu_417_p3 <= valid_V(5 downto 5);
    tmp_60_fu_437_p3 <= valid_V(6 downto 6);
    tmp_61_fu_451_p3 <= valid_V(7 downto 7);
    tmp_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indexReg_V_fu_288_p4),64));
    tmp_s_fu_678_p2 <= "1" when (mruArray_V_6_q0 = ap_const_lv8_FF) else "0";
    val_assign_1_fu_689_p2 <= "1" when (indexReg_V_reg_745 = ap_const_lv8_1) else "0";
    val_assign_2_fu_694_p2 <= "1" when (indexReg_V_reg_745 = ap_const_lv8_2) else "0";
    val_assign_3_fu_699_p2 <= "1" when (indexReg_V_reg_745 = ap_const_lv8_3) else "0";
    val_assign_4_fu_704_p2 <= "1" when (indexReg_V_reg_745 = ap_const_lv8_4) else "0";
    val_assign_5_fu_709_p2 <= "1" when (indexReg_V_reg_745 = ap_const_lv8_5) else "0";
    val_assign_6_fu_714_p2 <= "1" when (indexReg_V_reg_745 = ap_const_lv8_6) else "0";
    val_assign_7_fu_719_p2 <= "1" when (indexReg_V_reg_745 = ap_const_lv8_7) else "0";
    val_assign_fu_684_p2 <= "1" when (indexReg_V_reg_745 = ap_const_lv8_0) else "0";
end behav;
