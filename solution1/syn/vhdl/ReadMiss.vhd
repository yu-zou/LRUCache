-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ReadMiss is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_addr_V : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dram_V_AWVALID : OUT STD_LOGIC;
    m_axi_dram_V_AWREADY : IN STD_LOGIC;
    m_axi_dram_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dram_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dram_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dram_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dram_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_WVALID : OUT STD_LOGIC;
    m_axi_dram_V_WREADY : IN STD_LOGIC;
    m_axi_dram_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_dram_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_dram_V_WLAST : OUT STD_LOGIC;
    m_axi_dram_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_ARVALID : OUT STD_LOGIC;
    m_axi_dram_V_ARREADY : IN STD_LOGIC;
    m_axi_dram_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dram_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dram_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dram_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dram_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dram_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_RVALID : IN STD_LOGIC;
    m_axi_dram_V_RREADY : OUT STD_LOGIC;
    m_axi_dram_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_dram_V_RLAST : IN STD_LOGIC;
    m_axi_dram_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_V_BVALID : IN STD_LOGIC;
    m_axi_dram_V_BREADY : OUT STD_LOGIC;
    m_axi_dram_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dram_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dram_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    dram_V_offset : IN STD_LOGIC_VECTOR (25 downto 0);
    valid_V : IN STD_LOGIC_VECTOR (7 downto 0);
    tag_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_4_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_5_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_6_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    tag_7_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    validArray_V_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    validArray_V_4_ce0 : OUT STD_LOGIC;
    validArray_V_4_we0 : OUT STD_LOGIC;
    validArray_V_4_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tagArray_0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tagArray_0_V_ce0 : OUT STD_LOGIC;
    tagArray_0_V_we0 : OUT STD_LOGIC;
    tagArray_0_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    tagArray_1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tagArray_1_V_ce0 : OUT STD_LOGIC;
    tagArray_1_V_we0 : OUT STD_LOGIC;
    tagArray_1_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    tagArray_2_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tagArray_2_V_ce0 : OUT STD_LOGIC;
    tagArray_2_V_we0 : OUT STD_LOGIC;
    tagArray_2_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    tagArray_3_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tagArray_3_V_ce0 : OUT STD_LOGIC;
    tagArray_3_V_we0 : OUT STD_LOGIC;
    tagArray_3_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    tagArray_4_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tagArray_4_V_ce0 : OUT STD_LOGIC;
    tagArray_4_V_we0 : OUT STD_LOGIC;
    tagArray_4_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    tagArray_5_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tagArray_5_V_ce0 : OUT STD_LOGIC;
    tagArray_5_V_we0 : OUT STD_LOGIC;
    tagArray_5_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    tagArray_6_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tagArray_6_V_ce0 : OUT STD_LOGIC;
    tagArray_6_V_we0 : OUT STD_LOGIC;
    tagArray_6_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    tagArray_7_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tagArray_7_V_ce0 : OUT STD_LOGIC;
    tagArray_7_V_we0 : OUT STD_LOGIC;
    tagArray_7_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    dataArray_0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_0_V_ce0 : OUT STD_LOGIC;
    dataArray_0_V_we0 : OUT STD_LOGIC;
    dataArray_0_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_0_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_1_V_ce0 : OUT STD_LOGIC;
    dataArray_1_V_we0 : OUT STD_LOGIC;
    dataArray_1_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_1_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_2_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_2_V_ce0 : OUT STD_LOGIC;
    dataArray_2_V_we0 : OUT STD_LOGIC;
    dataArray_2_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_2_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_3_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_3_V_ce0 : OUT STD_LOGIC;
    dataArray_3_V_we0 : OUT STD_LOGIC;
    dataArray_3_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_3_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_4_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_4_V_ce0 : OUT STD_LOGIC;
    dataArray_4_V_we0 : OUT STD_LOGIC;
    dataArray_4_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_4_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_5_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_5_V_ce0 : OUT STD_LOGIC;
    dataArray_5_V_we0 : OUT STD_LOGIC;
    dataArray_5_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_5_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_6_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_6_V_ce0 : OUT STD_LOGIC;
    dataArray_6_V_we0 : OUT STD_LOGIC;
    dataArray_6_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_6_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    dataArray_7_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataArray_7_V_ce0 : OUT STD_LOGIC;
    dataArray_7_V_we0 : OUT STD_LOGIC;
    dataArray_7_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dataArray_7_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    mruArray_V_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mruArray_V_4_ce0 : OUT STD_LOGIC;
    mruArray_V_4_we0 : OUT STD_LOGIC;
    mruArray_V_4_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mruArray_V_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (511 downto 0) );
end;


architecture behav of ReadMiss is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dram_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal dram_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal dram_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal dram_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal dram_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal isEvict_2_reg_684 : STD_LOGIC_VECTOR (0 downto 0);
    signal indexReg_V_fu_740_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal indexReg_V_reg_1093 : STD_LOGIC_VECTOR (7 downto 0);
    signal tagReg_V_fu_750_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tagReg_V_reg_1106 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_1118 : STD_LOGIC_VECTOR (63 downto 0);
    signal mruArray_V_3_addr_reg_1147 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tempMru_V_reg_1204 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_4_fu_831_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_771_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_775_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_783_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_791_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_799_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_807_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_815_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_899_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_34_fu_839_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_843_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_851_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_859_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_867_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_875_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_883_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_cast_fu_910_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_reg_1264 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_fu_914_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_reg_1269 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_sig_ioackin_m_axi_dram_V_ARREADY : STD_LOGIC;
    signal Hi_assign_cast_fu_930_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hi_assign_cast_reg_1280 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_dramBlockR_V_reg_1286 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_50_fu_934_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_50_reg_1298 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_isEvict_2_phi_fu_689_p32 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sum3_fu_984_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum3_reg_1384 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_963_p10 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_4_reg_1389 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_sig_ioackin_m_axi_dram_V_AWREADY : STD_LOGIC;
    signal Hi_assign_reg_578 : STD_LOGIC_VECTOR (3 downto 0);
    signal tempValid_V_2_reg_637 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataArray_0_V_addr_gep_fu_453_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataArray_1_V_addr_gep_fu_460_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataArray_2_V_addr_gep_fu_467_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataArray_3_V_addr_gep_fu_474_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataArray_4_V_addr_gep_fu_481_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataArray_5_V_addr_gep_fu_488_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataArray_6_V_addr_gep_fu_495_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataArray_7_V_addr_gep_fu_502_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_cast_fu_920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_cast_fu_989_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_dram_V_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_dram_V_AWREADY : STD_LOGIC := '0';
    signal ap_block_state18 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_dram_V_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_dram_V_WREADY : STD_LOGIC;
    signal tmp_3_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_999_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_49_fu_823_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_891_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_cast_fu_907_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_938_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_938_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_s_fu_952_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_cast_fu_959_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_4_fu_1013_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_assign_7_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_6_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_5_fu_1052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_4_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_3_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_2_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_1_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_938_ce : STD_LOGIC;
    signal grp_fu_963_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component PLRUCache_mux_83_24_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        din3 : IN STD_LOGIC_VECTOR (23 downto 0);
        din4 : IN STD_LOGIC_VECTOR (23 downto 0);
        din5 : IN STD_LOGIC_VECTOR (23 downto 0);
        din6 : IN STD_LOGIC_VECTOR (23 downto 0);
        din7 : IN STD_LOGIC_VECTOR (23 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component PLRUCache_mux_83_512_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (511 downto 0);
        din2 : IN STD_LOGIC_VECTOR (511 downto 0);
        din3 : IN STD_LOGIC_VECTOR (511 downto 0);
        din4 : IN STD_LOGIC_VECTOR (511 downto 0);
        din5 : IN STD_LOGIC_VECTOR (511 downto 0);
        din6 : IN STD_LOGIC_VECTOR (511 downto 0);
        din7 : IN STD_LOGIC_VECTOR (511 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;



begin
    PLRUCache_mux_83_24_2_1_U42 : component PLRUCache_mux_83_24_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 3,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tag_0_V_read,
        din1 => tag_1_V_read,
        din2 => tag_2_V_read,
        din3 => tag_3_V_read,
        din4 => tag_4_V_read,
        din5 => tag_5_V_read,
        din6 => tag_6_V_read,
        din7 => tag_7_V_read,
        din8 => grp_fu_938_p9,
        ce => grp_fu_938_ce,
        dout => grp_fu_938_p10);

    PLRUCache_mux_83_512_2_1_U43 : component PLRUCache_mux_83_512_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 512,
        din1_WIDTH => 512,
        din2_WIDTH => 512,
        din3_WIDTH => 512,
        din4_WIDTH => 512,
        din5_WIDTH => 512,
        din6_WIDTH => 512,
        din7_WIDTH => 512,
        din8_WIDTH => 3,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dataArray_0_V_q0,
        din1 => dataArray_1_V_q0,
        din2 => dataArray_2_V_q0,
        din3 => dataArray_3_V_q0,
        din4 => dataArray_4_V_q0,
        din5 => dataArray_5_V_q0,
        din6 => dataArray_6_V_q0,
        din7 => dataArray_7_V_q0,
        din8 => tmp_50_reg_1298,
        ce => grp_fu_963_ce,
        dout => grp_fu_963_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_dram_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_dram_V_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    if ((ap_sig_ioackin_m_axi_dram_V_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_dram_V_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_dram_V_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_dram_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_dram_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_dram_V_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    if ((ap_sig_ioackin_m_axi_dram_V_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_dram_V_AWREADY <= ap_const_logic_0;
                    elsif ((m_axi_dram_V_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_dram_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_dram_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_dram_V_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    if ((ap_sig_ioackin_m_axi_dram_V_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_dram_V_WREADY <= ap_const_logic_0;
                    elsif ((m_axi_dram_V_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_dram_V_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    Hi_assign_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_47_fu_815_p3 = ap_const_lv1_1) and (tmp_45_fu_807_p3 = ap_const_lv1_1) and (tmp_43_fu_799_p3 = ap_const_lv1_1) and (tmp_41_fu_791_p3 = ap_const_lv1_1) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                Hi_assign_reg_578 <= p_4_fu_831_p3;
            elsif (((tmp_46_fu_883_p3 = ap_const_lv1_1) and (tmp_44_fu_875_p3 = ap_const_lv1_1) and (tmp_42_fu_867_p3 = ap_const_lv1_1) and (tmp_40_fu_859_p3 = ap_const_lv1_1) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                Hi_assign_reg_578 <= p_s_fu_899_p3;
            elsif ((((tmp_34_fu_839_p1 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_35_fu_771_p1 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                Hi_assign_reg_578 <= ap_const_lv4_0;
            elsif ((((tmp_36_fu_843_p3 = ap_const_lv1_0) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_37_fu_775_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                Hi_assign_reg_578 <= ap_const_lv4_1;
            elsif ((((tmp_38_fu_851_p3 = ap_const_lv1_0) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_39_fu_783_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                Hi_assign_reg_578 <= ap_const_lv4_2;
            elsif ((((tmp_40_fu_859_p3 = ap_const_lv1_0) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_41_fu_791_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                Hi_assign_reg_578 <= ap_const_lv4_3;
            elsif ((((tmp_42_fu_867_p3 = ap_const_lv1_0) and (tmp_40_fu_859_p3 = ap_const_lv1_1) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_43_fu_799_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_41_fu_791_p3 = ap_const_lv1_1) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                Hi_assign_reg_578 <= ap_const_lv4_4;
            elsif ((((tmp_44_fu_875_p3 = ap_const_lv1_0) and (tmp_42_fu_867_p3 = ap_const_lv1_1) and (tmp_40_fu_859_p3 = ap_const_lv1_1) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_45_fu_807_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_43_fu_799_p3 = ap_const_lv1_1) and (tmp_41_fu_791_p3 = ap_const_lv1_1) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                Hi_assign_reg_578 <= ap_const_lv4_5;
            elsif ((((tmp_46_fu_883_p3 = ap_const_lv1_0) and (tmp_44_fu_875_p3 = ap_const_lv1_1) and (tmp_42_fu_867_p3 = ap_const_lv1_1) and (tmp_40_fu_859_p3 = ap_const_lv1_1) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_47_fu_815_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_45_fu_807_p3 = ap_const_lv1_1) and (tmp_43_fu_799_p3 = ap_const_lv1_1) and (tmp_41_fu_791_p3 = ap_const_lv1_1) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                Hi_assign_reg_578 <= ap_const_lv4_6;
            end if; 
        end if;
    end process;

    isEvict_2_reg_684_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_35_fu_771_p1 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_37_fu_775_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_39_fu_783_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_41_fu_791_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_43_fu_799_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_41_fu_791_p3 = ap_const_lv1_1) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_45_fu_807_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_43_fu_799_p3 = ap_const_lv1_1) and (tmp_41_fu_791_p3 = ap_const_lv1_1) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_47_fu_815_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_45_fu_807_p3 = ap_const_lv1_1) and (tmp_43_fu_799_p3 = ap_const_lv1_1) and (tmp_41_fu_791_p3 = ap_const_lv1_1) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_47_fu_815_p3 = ap_const_lv1_1) and (tmp_45_fu_807_p3 = ap_const_lv1_1) and (tmp_43_fu_799_p3 = ap_const_lv1_1) and (tmp_41_fu_791_p3 = ap_const_lv1_1) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                isEvict_2_reg_684 <= ap_const_lv1_0;
            elsif ((((tmp_34_fu_839_p1 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_36_fu_843_p3 = ap_const_lv1_0) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_38_fu_851_p3 = ap_const_lv1_0) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_40_fu_859_p3 = ap_const_lv1_0) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_42_fu_867_p3 = ap_const_lv1_0) and (tmp_40_fu_859_p3 = ap_const_lv1_1) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_44_fu_875_p3 = ap_const_lv1_0) and (tmp_42_fu_867_p3 = ap_const_lv1_1) and (tmp_40_fu_859_p3 = ap_const_lv1_1) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_46_fu_883_p3 = ap_const_lv1_0) and (tmp_44_fu_875_p3 = ap_const_lv1_1) and (tmp_42_fu_867_p3 = ap_const_lv1_1) and (tmp_40_fu_859_p3 = ap_const_lv1_1) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_46_fu_883_p3 = ap_const_lv1_1) and (tmp_44_fu_875_p3 = ap_const_lv1_1) and (tmp_42_fu_867_p3 = ap_const_lv1_1) and (tmp_40_fu_859_p3 = ap_const_lv1_1) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                isEvict_2_reg_684 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    tempValid_V_2_reg_637_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_35_fu_771_p1 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_37_fu_775_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_39_fu_783_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_41_fu_791_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_43_fu_799_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_41_fu_791_p3 = ap_const_lv1_1) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_45_fu_807_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_43_fu_799_p3 = ap_const_lv1_1) and (tmp_41_fu_791_p3 = ap_const_lv1_1) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_47_fu_815_p3 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_45_fu_807_p3 = ap_const_lv1_1) and (tmp_43_fu_799_p3 = ap_const_lv1_1) and (tmp_41_fu_791_p3 = ap_const_lv1_1) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_s_fu_765_p2 = ap_const_lv1_0) and (tmp_47_fu_815_p3 = ap_const_lv1_1) and (tmp_45_fu_807_p3 = ap_const_lv1_1) and (tmp_43_fu_799_p3 = ap_const_lv1_1) and (tmp_41_fu_791_p3 = ap_const_lv1_1) and (tmp_39_fu_783_p3 = ap_const_lv1_1) and (tmp_37_fu_775_p3 = ap_const_lv1_1) and (tmp_35_fu_771_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                tempValid_V_2_reg_637 <= valid_V;
            elsif ((((tmp_34_fu_839_p1 = ap_const_lv1_0) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_36_fu_843_p3 = ap_const_lv1_0) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_38_fu_851_p3 = ap_const_lv1_0) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_40_fu_859_p3 = ap_const_lv1_0) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_42_fu_867_p3 = ap_const_lv1_0) and (tmp_40_fu_859_p3 = ap_const_lv1_1) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_44_fu_875_p3 = ap_const_lv1_0) and (tmp_42_fu_867_p3 = ap_const_lv1_1) and (tmp_40_fu_859_p3 = ap_const_lv1_1) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_46_fu_883_p3 = ap_const_lv1_0) and (tmp_44_fu_875_p3 = ap_const_lv1_1) and (tmp_42_fu_867_p3 = ap_const_lv1_1) and (tmp_40_fu_859_p3 = ap_const_lv1_1) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_46_fu_883_p3 = ap_const_lv1_1) and (tmp_44_fu_875_p3 = ap_const_lv1_1) and (tmp_42_fu_867_p3 = ap_const_lv1_1) and (tmp_40_fu_859_p3 = ap_const_lv1_1) and (tmp_38_fu_851_p3 = ap_const_lv1_1) and (tmp_36_fu_843_p3 = ap_const_lv1_1) and (tmp_34_fu_839_p1 = ap_const_lv1_1) and (tmp_s_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                tempValid_V_2_reg_637 <= ap_const_lv8_FF;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_dram_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    Hi_assign_cast_reg_1280(3 downto 0) <= Hi_assign_cast_fu_930_p1(3 downto 0);
                i_dramBlockR_V_reg_1286 <= m_axi_dram_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                indexReg_V_reg_1093 <= indexReg_V_fu_740_p4;
                mruArray_V_3_addr_reg_1147 <= tmp_fu_760_p1(8 - 1 downto 0);
                tagReg_V_reg_1106 <= tagReg_V_fu_750_p4;
                    tmp_reg_1118(7 downto 0) <= tmp_fu_760_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    sext_cast_reg_1264(25 downto 0) <= sext_cast_fu_910_p1(25 downto 0);
                sum_reg_1269 <= sum_fu_914_p2;
                tempMru_V_reg_1204 <= mruArray_V_4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                sum3_reg_1384 <= sum3_fu_984_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_m_axi_dram_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                tmp_4_reg_1389 <= grp_fu_963_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_dram_V_RVALID = ap_const_logic_1) and (ap_phi_mux_isEvict_2_phi_fu_689_p32 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_50_reg_1298 <= tmp_50_fu_934_p1;
            end if;
        end if;
    end process;
    tmp_reg_1118(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    sext_cast_reg_1264(32 downto 26) <= "0000000";
    Hi_assign_cast_reg_1280(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_dram_V_RVALID, m_axi_dram_V_BVALID, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state18, isEvict_2_reg_684, ap_sig_ioackin_m_axi_dram_V_ARREADY, ap_phi_mux_isEvict_2_phi_fu_689_p32, ap_sig_ioackin_m_axi_dram_V_AWREADY, ap_sig_ioackin_m_axi_dram_V_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_sig_ioackin_m_axi_dram_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((m_axi_dram_V_RVALID = ap_const_logic_1) and (ap_phi_mux_isEvict_2_phi_fu_689_p32 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                elsif (((m_axi_dram_V_RVALID = ap_const_logic_1) and (ap_phi_mux_isEvict_2_phi_fu_689_p32 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_sig_ioackin_m_axi_dram_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_sig_ioackin_m_axi_dram_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Hi_assign_cast_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hi_assign_reg_578),32));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state18_assign_proc : process(m_axi_dram_V_BVALID, isEvict_2_reg_684)
    begin
                ap_block_state18 <= ((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if (((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_isEvict_2_phi_fu_689_p32 <= isEvict_2_reg_684;

    ap_ready_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= i_dramBlockR_V_reg_1286;

    ap_sig_ioackin_m_axi_dram_V_ARREADY_assign_proc : process(m_axi_dram_V_ARREADY, ap_reg_ioackin_m_axi_dram_V_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_dram_V_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_dram_V_ARREADY <= m_axi_dram_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_dram_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_dram_V_AWREADY_assign_proc : process(m_axi_dram_V_AWREADY, ap_reg_ioackin_m_axi_dram_V_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_dram_V_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_dram_V_AWREADY <= m_axi_dram_V_AWREADY;
        else 
            ap_sig_ioackin_m_axi_dram_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_dram_V_WREADY_assign_proc : process(m_axi_dram_V_WREADY, ap_reg_ioackin_m_axi_dram_V_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_dram_V_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_dram_V_WREADY <= m_axi_dram_V_WREADY;
        else 
            ap_sig_ioackin_m_axi_dram_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    dataArray_0_V_addr_gep_fu_453_p3 <= tmp_reg_1118(8 - 1 downto 0);

    dataArray_0_V_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, tmp_reg_1118, dataArray_0_V_addr_gep_fu_453_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dataArray_0_V_address0 <= dataArray_0_V_addr_gep_fu_453_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dataArray_0_V_address0 <= tmp_reg_1118(8 - 1 downto 0);
        else 
            dataArray_0_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dataArray_0_V_ce0_assign_proc : process(m_axi_dram_V_RVALID, m_axi_dram_V_BVALID, ap_CS_fsm_state10, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if (((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((m_axi_dram_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            dataArray_0_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_0_V_d0 <= i_dramBlockR_V_reg_1286;

    dataArray_0_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            dataArray_0_V_we0 <= ap_const_logic_1;
        else 
            dataArray_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_1_V_addr_gep_fu_460_p3 <= tmp_reg_1118(8 - 1 downto 0);

    dataArray_1_V_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, tmp_reg_1118, dataArray_1_V_addr_gep_fu_460_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dataArray_1_V_address0 <= dataArray_1_V_addr_gep_fu_460_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dataArray_1_V_address0 <= tmp_reg_1118(8 - 1 downto 0);
        else 
            dataArray_1_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dataArray_1_V_ce0_assign_proc : process(m_axi_dram_V_RVALID, m_axi_dram_V_BVALID, ap_CS_fsm_state10, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if (((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((m_axi_dram_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            dataArray_1_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_1_V_d0 <= i_dramBlockR_V_reg_1286;

    dataArray_1_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            dataArray_1_V_we0 <= ap_const_logic_1;
        else 
            dataArray_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_2_V_addr_gep_fu_467_p3 <= tmp_reg_1118(8 - 1 downto 0);

    dataArray_2_V_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, tmp_reg_1118, dataArray_2_V_addr_gep_fu_467_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dataArray_2_V_address0 <= dataArray_2_V_addr_gep_fu_467_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dataArray_2_V_address0 <= tmp_reg_1118(8 - 1 downto 0);
        else 
            dataArray_2_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dataArray_2_V_ce0_assign_proc : process(m_axi_dram_V_RVALID, m_axi_dram_V_BVALID, ap_CS_fsm_state10, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if (((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((m_axi_dram_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            dataArray_2_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_2_V_d0 <= i_dramBlockR_V_reg_1286;

    dataArray_2_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            dataArray_2_V_we0 <= ap_const_logic_1;
        else 
            dataArray_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_3_V_addr_gep_fu_474_p3 <= tmp_reg_1118(8 - 1 downto 0);

    dataArray_3_V_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, tmp_reg_1118, dataArray_3_V_addr_gep_fu_474_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dataArray_3_V_address0 <= dataArray_3_V_addr_gep_fu_474_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dataArray_3_V_address0 <= tmp_reg_1118(8 - 1 downto 0);
        else 
            dataArray_3_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dataArray_3_V_ce0_assign_proc : process(m_axi_dram_V_RVALID, m_axi_dram_V_BVALID, ap_CS_fsm_state10, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if (((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((m_axi_dram_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            dataArray_3_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_3_V_d0 <= i_dramBlockR_V_reg_1286;

    dataArray_3_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            dataArray_3_V_we0 <= ap_const_logic_1;
        else 
            dataArray_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_4_V_addr_gep_fu_481_p3 <= tmp_reg_1118(8 - 1 downto 0);

    dataArray_4_V_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, tmp_reg_1118, dataArray_4_V_addr_gep_fu_481_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dataArray_4_V_address0 <= dataArray_4_V_addr_gep_fu_481_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dataArray_4_V_address0 <= tmp_reg_1118(8 - 1 downto 0);
        else 
            dataArray_4_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dataArray_4_V_ce0_assign_proc : process(m_axi_dram_V_RVALID, m_axi_dram_V_BVALID, ap_CS_fsm_state10, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if (((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((m_axi_dram_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            dataArray_4_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_4_V_d0 <= i_dramBlockR_V_reg_1286;

    dataArray_4_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            dataArray_4_V_we0 <= ap_const_logic_1;
        else 
            dataArray_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_5_V_addr_gep_fu_488_p3 <= tmp_reg_1118(8 - 1 downto 0);

    dataArray_5_V_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, tmp_reg_1118, dataArray_5_V_addr_gep_fu_488_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dataArray_5_V_address0 <= dataArray_5_V_addr_gep_fu_488_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dataArray_5_V_address0 <= tmp_reg_1118(8 - 1 downto 0);
        else 
            dataArray_5_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dataArray_5_V_ce0_assign_proc : process(m_axi_dram_V_RVALID, m_axi_dram_V_BVALID, ap_CS_fsm_state10, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if (((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((m_axi_dram_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            dataArray_5_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_5_V_d0 <= i_dramBlockR_V_reg_1286;

    dataArray_5_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            dataArray_5_V_we0 <= ap_const_logic_1;
        else 
            dataArray_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_6_V_addr_gep_fu_495_p3 <= tmp_reg_1118(8 - 1 downto 0);

    dataArray_6_V_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, tmp_reg_1118, dataArray_6_V_addr_gep_fu_495_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dataArray_6_V_address0 <= dataArray_6_V_addr_gep_fu_495_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dataArray_6_V_address0 <= tmp_reg_1118(8 - 1 downto 0);
        else 
            dataArray_6_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dataArray_6_V_ce0_assign_proc : process(m_axi_dram_V_RVALID, m_axi_dram_V_BVALID, ap_CS_fsm_state10, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if (((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((m_axi_dram_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            dataArray_6_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_6_V_d0 <= i_dramBlockR_V_reg_1286;

    dataArray_6_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            dataArray_6_V_we0 <= ap_const_logic_1;
        else 
            dataArray_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_7_V_addr_gep_fu_502_p3 <= tmp_reg_1118(8 - 1 downto 0);

    dataArray_7_V_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, tmp_reg_1118, dataArray_7_V_addr_gep_fu_502_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dataArray_7_V_address0 <= dataArray_7_V_addr_gep_fu_502_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dataArray_7_V_address0 <= tmp_reg_1118(8 - 1 downto 0);
        else 
            dataArray_7_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dataArray_7_V_ce0_assign_proc : process(m_axi_dram_V_RVALID, m_axi_dram_V_BVALID, ap_CS_fsm_state10, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if (((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((m_axi_dram_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            dataArray_7_V_ce0 <= ap_const_logic_1;
        else 
            dataArray_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataArray_7_V_d0 <= i_dramBlockR_V_reg_1286;

    dataArray_7_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            dataArray_7_V_we0 <= ap_const_logic_1;
        else 
            dataArray_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dram_V_blk_n_AR_assign_proc : process(m_axi_dram_V_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dram_V_blk_n_AR <= m_axi_dram_V_ARREADY;
        else 
            dram_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    dram_V_blk_n_AW_assign_proc : process(m_axi_dram_V_AWREADY, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dram_V_blk_n_AW <= m_axi_dram_V_AWREADY;
        else 
            dram_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    dram_V_blk_n_B_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if (((isEvict_2_reg_684 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            dram_V_blk_n_B <= m_axi_dram_V_BVALID;
        else 
            dram_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    dram_V_blk_n_R_assign_proc : process(m_axi_dram_V_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dram_V_blk_n_R <= m_axi_dram_V_RVALID;
        else 
            dram_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    dram_V_blk_n_W_assign_proc : process(m_axi_dram_V_WREADY, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dram_V_blk_n_W <= m_axi_dram_V_WREADY;
        else 
            dram_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_938_ce_assign_proc : process(m_axi_dram_V_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((m_axi_dram_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            grp_fu_938_ce <= ap_const_logic_1;
        else 
            grp_fu_938_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_938_p9 <= Hi_assign_reg_578(3 - 1 downto 0);

    grp_fu_963_ce_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11, ap_sig_ioackin_m_axi_dram_V_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_sig_ioackin_m_axi_dram_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            grp_fu_963_ce <= ap_const_logic_1;
        else 
            grp_fu_963_ce <= ap_const_logic_0;
        end if; 
    end process;

    
    indexReg_V_fu_740_p4_proc : process(i_addr_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable indexReg_V_fu_740_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_7(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := i_addr_V;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_7(5-1 downto 0)));
            for indexReg_V_fu_740_p4_i in 0 to 32-1 loop
                v0_cpy(indexReg_V_fu_740_p4_i) := i_addr_V(32-1-indexReg_V_fu_740_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        indexReg_V_fu_740_p4 <= resvalue(8-1 downto 0);
    end process;

    m_axi_dram_V_ARADDR <= sum_cast_fu_920_p1(32 - 1 downto 0);
    m_axi_dram_V_ARBURST <= ap_const_lv2_0;
    m_axi_dram_V_ARCACHE <= ap_const_lv4_0;
    m_axi_dram_V_ARID <= ap_const_lv1_0;
    m_axi_dram_V_ARLEN <= ap_const_lv32_1;
    m_axi_dram_V_ARLOCK <= ap_const_lv2_0;
    m_axi_dram_V_ARPROT <= ap_const_lv3_0;
    m_axi_dram_V_ARQOS <= ap_const_lv4_0;
    m_axi_dram_V_ARREGION <= ap_const_lv4_0;
    m_axi_dram_V_ARSIZE <= ap_const_lv3_0;
    m_axi_dram_V_ARUSER <= ap_const_lv1_0;

    m_axi_dram_V_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_m_axi_dram_V_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_dram_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_dram_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_dram_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_dram_V_AWADDR <= sum3_cast_fu_989_p1(32 - 1 downto 0);
    m_axi_dram_V_AWBURST <= ap_const_lv2_0;
    m_axi_dram_V_AWCACHE <= ap_const_lv4_0;
    m_axi_dram_V_AWID <= ap_const_lv1_0;
    m_axi_dram_V_AWLEN <= ap_const_lv32_1;
    m_axi_dram_V_AWLOCK <= ap_const_lv2_0;
    m_axi_dram_V_AWPROT <= ap_const_lv3_0;
    m_axi_dram_V_AWQOS <= ap_const_lv4_0;
    m_axi_dram_V_AWREGION <= ap_const_lv4_0;
    m_axi_dram_V_AWSIZE <= ap_const_lv3_0;
    m_axi_dram_V_AWUSER <= ap_const_lv1_0;

    m_axi_dram_V_AWVALID_assign_proc : process(ap_CS_fsm_state12, ap_reg_ioackin_m_axi_dram_V_AWREADY)
    begin
        if (((ap_reg_ioackin_m_axi_dram_V_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_dram_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_dram_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_dram_V_BREADY_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (isEvict_2_reg_684 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            m_axi_dram_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_dram_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_dram_V_RREADY_assign_proc : process(m_axi_dram_V_RVALID, ap_CS_fsm_state10)
    begin
        if (((m_axi_dram_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_dram_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_dram_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_dram_V_WDATA <= tmp_4_reg_1389;
    m_axi_dram_V_WID <= ap_const_lv1_0;
    m_axi_dram_V_WLAST <= ap_const_logic_0;
    m_axi_dram_V_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_dram_V_WUSER <= ap_const_lv1_0;

    m_axi_dram_V_WVALID_assign_proc : process(ap_CS_fsm_state13, ap_reg_ioackin_m_axi_dram_V_WREADY)
    begin
        if (((ap_reg_ioackin_m_axi_dram_V_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_dram_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_dram_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mruArray_V_4_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state18, tmp_fu_760_p1, mruArray_V_3_addr_reg_1147)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            mruArray_V_4_address0 <= mruArray_V_3_addr_reg_1147;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            mruArray_V_4_address0 <= tmp_fu_760_p1(8 - 1 downto 0);
        else 
            mruArray_V_4_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mruArray_V_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            mruArray_V_4_ce0 <= ap_const_logic_1;
        else 
            mruArray_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mruArray_V_4_d0 <= (((((((val_assign_7_fu_1062_p2 & val_assign_6_fu_1057_p2) & val_assign_5_fu_1052_p2) & val_assign_4_fu_1047_p2) & val_assign_3_fu_1042_p2) & val_assign_2_fu_1037_p2) & val_assign_1_fu_1032_p2) & val_assign_fu_1027_p2);

    mruArray_V_4_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_3_fu_1021_p2)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_3_fu_1021_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            mruArray_V_4_we0 <= ap_const_logic_1;
        else 
            mruArray_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_4_fu_831_p3 <= 
        ap_const_lv4_8 when (tmp_49_fu_823_p3(0) = '1') else 
        ap_const_lv4_7;
    
    p_Result_4_fu_1013_p4_proc : process(tempMru_V_reg_1204, Hi_assign_cast_reg_1280)
    variable result: std_logic_vector(0 downto 0);
    begin
        p_Result_4_fu_1013_p4 <= tempMru_V_reg_1204;
        if to_integer(unsigned(Hi_assign_cast_reg_1280)) >= tempMru_V_reg_1204'low and to_integer(unsigned(Hi_assign_cast_reg_1280)) <= tempMru_V_reg_1204'high then
            result(0) := '0';
            for i in ap_const_lv8_1'range loop
                result(0) := result(0) or ap_const_lv8_1(i);
            end loop;
            p_Result_4_fu_1013_p4(to_integer(unsigned(Hi_assign_cast_reg_1280))) <= result(0);
        end if;
    end process;

    p_Result_s_fu_952_p3 <= (grp_fu_938_p10 & indexReg_V_reg_1093);
    p_s_fu_899_p3 <= 
        ap_const_lv4_8 when (tmp_48_fu_891_p3(0) = '1') else 
        ap_const_lv4_7;
    sext_cast_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dram_V_offset),33));
    sum3_cast_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_reg_1384),64));
    sum3_fu_984_p2 <= std_logic_vector(unsigned(sext_cast_reg_1264) + unsigned(tmp_2_cast_fu_959_p1));
    sum_cast_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_reg_1269),64));
    sum_fu_914_p2 <= std_logic_vector(unsigned(tmp_1_cast_fu_907_p1) + unsigned(sext_cast_fu_910_p1));
    tagArray_0_V_address0 <= tmp_reg_1118(8 - 1 downto 0);

    tagArray_0_V_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_0_V_ce0 <= ap_const_logic_1;
        else 
            tagArray_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_0_V_d0 <= tagReg_V_reg_1106;

    tagArray_0_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_0_V_we0 <= ap_const_logic_1;
        else 
            tagArray_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_1_V_address0 <= tmp_reg_1118(8 - 1 downto 0);

    tagArray_1_V_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_1_V_ce0 <= ap_const_logic_1;
        else 
            tagArray_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_1_V_d0 <= tagReg_V_reg_1106;

    tagArray_1_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_1_V_we0 <= ap_const_logic_1;
        else 
            tagArray_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_2_V_address0 <= tmp_reg_1118(8 - 1 downto 0);

    tagArray_2_V_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_2_V_ce0 <= ap_const_logic_1;
        else 
            tagArray_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_2_V_d0 <= tagReg_V_reg_1106;

    tagArray_2_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_2_V_we0 <= ap_const_logic_1;
        else 
            tagArray_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_3_V_address0 <= tmp_reg_1118(8 - 1 downto 0);

    tagArray_3_V_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_3_V_ce0 <= ap_const_logic_1;
        else 
            tagArray_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_3_V_d0 <= tagReg_V_reg_1106;

    tagArray_3_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_3_V_we0 <= ap_const_logic_1;
        else 
            tagArray_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_4_V_address0 <= tmp_reg_1118(8 - 1 downto 0);

    tagArray_4_V_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_4_V_ce0 <= ap_const_logic_1;
        else 
            tagArray_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_4_V_d0 <= tagReg_V_reg_1106;

    tagArray_4_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_4_V_we0 <= ap_const_logic_1;
        else 
            tagArray_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_5_V_address0 <= tmp_reg_1118(8 - 1 downto 0);

    tagArray_5_V_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_5_V_ce0 <= ap_const_logic_1;
        else 
            tagArray_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_5_V_d0 <= tagReg_V_reg_1106;

    tagArray_5_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_5_V_we0 <= ap_const_logic_1;
        else 
            tagArray_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_6_V_address0 <= tmp_reg_1118(8 - 1 downto 0);

    tagArray_6_V_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_6_V_ce0 <= ap_const_logic_1;
        else 
            tagArray_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_6_V_d0 <= tagReg_V_reg_1106;

    tagArray_6_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_6_V_we0 <= ap_const_logic_1;
        else 
            tagArray_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_7_V_address0 <= tmp_reg_1118(8 - 1 downto 0);

    tagArray_7_V_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_7_V_ce0 <= ap_const_logic_1;
        else 
            tagArray_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tagArray_7_V_d0 <= tagReg_V_reg_1106;

    tagArray_7_V_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684, tmp_51_fu_999_p1)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (tmp_51_fu_999_p1 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tagArray_7_V_we0 <= ap_const_logic_1;
        else 
            tagArray_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    
    tagReg_V_fu_750_p4_proc : process(i_addr_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tagReg_V_fu_750_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_8(5 - 1 downto 0);
        v0_cpy := i_addr_V;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_8(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tagReg_V_fu_750_p4_i in 0 to 32-1 loop
                v0_cpy(tagReg_V_fu_750_p4_i) := i_addr_V(32-1-tagReg_V_fu_750_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tagReg_V_fu_750_p4 <= resvalue(24-1 downto 0);
    end process;

    tmp_1_cast_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_addr_V),33));
    tmp_2_cast_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_952_p3),33));
    tmp_34_fu_839_p1 <= mruArray_V_4_q0(1 - 1 downto 0);
    tmp_35_fu_771_p1 <= valid_V(1 - 1 downto 0);
    tmp_36_fu_843_p3 <= mruArray_V_4_q0(1 downto 1);
    tmp_37_fu_775_p3 <= valid_V(1 downto 1);
    tmp_38_fu_851_p3 <= mruArray_V_4_q0(2 downto 2);
    tmp_39_fu_783_p3 <= valid_V(2 downto 2);
    tmp_3_fu_1021_p2 <= "1" when (p_Result_4_fu_1013_p4 = ap_const_lv8_FF) else "0";
    tmp_40_fu_859_p3 <= mruArray_V_4_q0(3 downto 3);
    tmp_41_fu_791_p3 <= valid_V(3 downto 3);
    tmp_42_fu_867_p3 <= mruArray_V_4_q0(4 downto 4);
    tmp_43_fu_799_p3 <= valid_V(4 downto 4);
    tmp_44_fu_875_p3 <= mruArray_V_4_q0(5 downto 5);
    tmp_45_fu_807_p3 <= valid_V(5 downto 5);
    tmp_46_fu_883_p3 <= mruArray_V_4_q0(6 downto 6);
    tmp_47_fu_815_p3 <= valid_V(6 downto 6);
    tmp_48_fu_891_p3 <= mruArray_V_4_q0(7 downto 7);
    tmp_49_fu_823_p3 <= valid_V(7 downto 7);
    tmp_50_fu_934_p1 <= Hi_assign_reg_578(3 - 1 downto 0);
    tmp_51_fu_999_p1 <= Hi_assign_reg_578(3 - 1 downto 0);
    tmp_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indexReg_V_fu_740_p4),64));
    tmp_s_fu_765_p2 <= "1" when (valid_V = ap_const_lv8_FF) else "0";
    val_assign_1_fu_1032_p2 <= "1" when (indexReg_V_reg_1093 = ap_const_lv8_1) else "0";
    val_assign_2_fu_1037_p2 <= "1" when (indexReg_V_reg_1093 = ap_const_lv8_2) else "0";
    val_assign_3_fu_1042_p2 <= "1" when (indexReg_V_reg_1093 = ap_const_lv8_3) else "0";
    val_assign_4_fu_1047_p2 <= "1" when (indexReg_V_reg_1093 = ap_const_lv8_4) else "0";
    val_assign_5_fu_1052_p2 <= "1" when (indexReg_V_reg_1093 = ap_const_lv8_5) else "0";
    val_assign_6_fu_1057_p2 <= "1" when (indexReg_V_reg_1093 = ap_const_lv8_6) else "0";
    val_assign_7_fu_1062_p2 <= "1" when (indexReg_V_reg_1093 = ap_const_lv8_7) else "0";
    val_assign_fu_1027_p2 <= "1" when (indexReg_V_reg_1093 = ap_const_lv8_0) else "0";
    validArray_V_4_address0 <= tmp_reg_1118(8 - 1 downto 0);

    validArray_V_4_ce0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            validArray_V_4_ce0 <= ap_const_logic_1;
        else 
            validArray_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    validArray_V_4_d0_proc : process(tempValid_V_2_reg_637, Hi_assign_cast_reg_1280)
    variable result: std_logic_vector(0 downto 0);
    begin
        validArray_V_4_d0 <= tempValid_V_2_reg_637;
        if to_integer(unsigned(Hi_assign_cast_reg_1280)) >= tempValid_V_2_reg_637'low and to_integer(unsigned(Hi_assign_cast_reg_1280)) <= tempValid_V_2_reg_637'high then
            result(0) := '0';
            for i in ap_const_lv8_1'range loop
                result(0) := result(0) or ap_const_lv8_1(i);
            end loop;
            validArray_V_4_d0(to_integer(unsigned(Hi_assign_cast_reg_1280))) <= result(0);
        end if;
    end process;


    validArray_V_4_we0_assign_proc : process(m_axi_dram_V_BVALID, ap_CS_fsm_state18, isEvict_2_reg_684)
    begin
        if ((not(((m_axi_dram_V_BVALID = ap_const_logic_0) and (isEvict_2_reg_684 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            validArray_V_4_we0 <= ap_const_logic_1;
        else 
            validArray_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
