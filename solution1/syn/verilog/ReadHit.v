// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ReadHit (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_addr_V,
        valid_V,
        tag_0_V_read,
        tag_1_V_read,
        tag_2_V_read,
        tag_3_V_read,
        tag_4_V_read,
        tag_5_V_read,
        tag_6_V_read,
        tag_7_V_read,
        dataArray_0_V_address0,
        dataArray_0_V_ce0,
        dataArray_0_V_q0,
        dataArray_1_V_address0,
        dataArray_1_V_ce0,
        dataArray_1_V_q0,
        dataArray_2_V_address0,
        dataArray_2_V_ce0,
        dataArray_2_V_q0,
        dataArray_3_V_address0,
        dataArray_3_V_ce0,
        dataArray_3_V_q0,
        dataArray_4_V_address0,
        dataArray_4_V_ce0,
        dataArray_4_V_q0,
        dataArray_5_V_address0,
        dataArray_5_V_ce0,
        dataArray_5_V_q0,
        dataArray_6_V_address0,
        dataArray_6_V_ce0,
        dataArray_6_V_q0,
        dataArray_7_V_address0,
        dataArray_7_V_ce0,
        dataArray_7_V_q0,
        mruArray_V_6_address0,
        mruArray_V_6_ce0,
        mruArray_V_6_we0,
        mruArray_V_6_d0,
        mruArray_V_6_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] i_addr_V;
input  [7:0] valid_V;
input  [23:0] tag_0_V_read;
input  [23:0] tag_1_V_read;
input  [23:0] tag_2_V_read;
input  [23:0] tag_3_V_read;
input  [23:0] tag_4_V_read;
input  [23:0] tag_5_V_read;
input  [23:0] tag_6_V_read;
input  [23:0] tag_7_V_read;
output  [7:0] dataArray_0_V_address0;
output   dataArray_0_V_ce0;
input  [511:0] dataArray_0_V_q0;
output  [7:0] dataArray_1_V_address0;
output   dataArray_1_V_ce0;
input  [511:0] dataArray_1_V_q0;
output  [7:0] dataArray_2_V_address0;
output   dataArray_2_V_ce0;
input  [511:0] dataArray_2_V_q0;
output  [7:0] dataArray_3_V_address0;
output   dataArray_3_V_ce0;
input  [511:0] dataArray_3_V_q0;
output  [7:0] dataArray_4_V_address0;
output   dataArray_4_V_ce0;
input  [511:0] dataArray_4_V_q0;
output  [7:0] dataArray_5_V_address0;
output   dataArray_5_V_ce0;
input  [511:0] dataArray_5_V_q0;
output  [7:0] dataArray_6_V_address0;
output   dataArray_6_V_ce0;
input  [511:0] dataArray_6_V_q0;
output  [7:0] dataArray_7_V_address0;
output   dataArray_7_V_ce0;
input  [511:0] dataArray_7_V_q0;
output  [7:0] mruArray_V_6_address0;
output   mruArray_V_6_ce0;
output   mruArray_V_6_we0;
output  [7:0] mruArray_V_6_d0;
input  [7:0] mruArray_V_6_q0;
output  [511:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dataArray_0_V_ce0;
reg dataArray_1_V_ce0;
reg dataArray_2_V_ce0;
reg dataArray_3_V_ce0;
reg dataArray_4_V_ce0;
reg dataArray_5_V_ce0;
reg dataArray_6_V_ce0;
reg dataArray_7_V_ce0;
reg mruArray_V_6_ce0;
reg mruArray_V_6_we0;
reg[511:0] ap_return;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] indexReg_V_fu_288_p4;
reg   [7:0] indexReg_V_reg_745;
reg   [7:0] mruArray_V_5_addr_reg_757;
wire   [0:0] or_cond6_fu_391_p2;
reg   [0:0] or_cond6_reg_762;
wire   [0:0] or_cond1_48_fu_431_p2;
reg   [0:0] or_cond1_48_reg_767;
wire   [0:0] sel_tmp13_demorgan_fu_501_p2;
reg   [0:0] sel_tmp13_demorgan_reg_772;
wire   [0:0] sel_tmp15_fu_519_p2;
reg   [0:0] sel_tmp15_reg_777;
wire   [0:0] sel_tmp33_demorgan_fu_525_p2;
reg   [0:0] sel_tmp33_demorgan_reg_783;
wire   [0:0] sel_tmp19_fu_549_p2;
reg   [0:0] sel_tmp19_reg_788;
wire   [2:0] newSel4_fu_583_p3;
reg   [2:0] newSel4_reg_794;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_308_p1;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_s_fu_678_p2;
reg   [23:0] tagReg_V_fu_298_p4;
wire   [0:0] tmp_54_fu_321_p1;
wire   [0:0] tmp_2_fu_325_p2;
wire   [0:0] tmp_55_fu_337_p3;
wire   [0:0] tmp_26_1_fu_345_p2;
wire   [0:0] tmp_56_fu_357_p3;
wire   [0:0] tmp_26_2_fu_365_p2;
wire   [0:0] tmp_57_fu_377_p3;
wire   [0:0] tmp_26_3_fu_385_p2;
wire   [0:0] tmp_58_fu_397_p3;
wire   [0:0] tmp_26_4_fu_405_p2;
wire   [0:0] tmp_59_fu_417_p3;
wire   [0:0] tmp_26_5_fu_425_p2;
wire   [0:0] tmp_61_fu_451_p3;
wire   [0:0] tmp_26_7_fu_459_p2;
wire   [0:0] or_cond_47_fu_331_p2;
wire   [0:0] or_cond8_fu_351_p2;
wire   [0:0] sel_tmp1_fu_471_p2;
wire   [0:0] sel_tmp6_demorgan_fu_483_p2;
wire   [0:0] or_cond9_fu_371_p2;
wire   [0:0] sel_tmp6_fu_489_p2;
wire   [0:0] sel_tmp22_demorgan_fu_507_p2;
wire   [0:0] or_cond7_fu_411_p2;
wire   [0:0] sel_tmp_fu_513_p2;
wire   [0:0] sel_tmp46_demorgan_fu_531_p2;
wire   [0:0] tmp_26_6_fu_445_p2;
wire   [0:0] sel_tmp18_fu_537_p2;
wire   [0:0] tmp1_fu_543_p2;
wire   [0:0] tmp_60_fu_437_p3;
wire   [0:0] sel_tmp7_fu_495_p2;
wire   [0:0] sel_tmp2_fu_477_p2;
wire   [0:0] or_cond3_49_fu_465_p2;
wire   [0:0] newSel2_fu_569_p2;
wire   [0:0] or_cond2_fu_563_p2;
wire   [2:0] newSel52_cast_cast_fu_555_p3;
wire   [2:0] newSel54_cast_fu_575_p3;
wire   [0:0] sel_tmp13_fu_591_p2;
wire   [0:0] sel_tmp16_fu_601_p2;
wire   [0:0] sel_tmp17_fu_606_p2;
wire   [0:0] sel_tmp14_fu_596_p2;
wire   [0:0] or_cond_fu_618_p2;
wire   [2:0] newSel_fu_611_p3;
wire   [2:0] newSel1_fu_623_p3;
wire   [0:0] or_cond1_fu_630_p2;
wire   [0:0] or_cond3_fu_643_p2;
wire   [2:0] newSel3_fu_635_p3;
wire   [2:0] grp_fu_656_p9;
wire   [0:0] val_assign_7_fu_719_p2;
wire   [0:0] val_assign_6_fu_714_p2;
wire   [0:0] val_assign_5_fu_709_p2;
wire   [0:0] val_assign_4_fu_704_p2;
wire   [0:0] val_assign_3_fu_699_p2;
wire   [0:0] val_assign_2_fu_694_p2;
wire   [0:0] val_assign_1_fu_689_p2;
wire   [0:0] val_assign_fu_684_p2;
wire   [511:0] grp_fu_656_p10;
reg   [511:0] ap_return_preg;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_return_preg = 512'd0;
end

PLRUCache_mux_83_512_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 512 ),
    .din2_WIDTH( 512 ),
    .din3_WIDTH( 512 ),
    .din4_WIDTH( 512 ),
    .din5_WIDTH( 512 ),
    .din6_WIDTH( 512 ),
    .din7_WIDTH( 512 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 512 ))
PLRUCache_mux_83_512_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dataArray_0_V_q0),
    .din1(dataArray_1_V_q0),
    .din2(dataArray_2_V_q0),
    .din3(dataArray_3_V_q0),
    .din4(dataArray_4_V_q0),
    .din5(dataArray_5_V_q0),
    .din6(dataArray_6_V_q0),
    .din7(dataArray_7_V_q0),
    .din8(grp_fu_656_p9),
    .ce(1'b1),
    .dout(grp_fu_656_p10)
);

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 512'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_preg <= grp_fu_656_p10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indexReg_V_reg_745 <= indexReg_V_fu_288_p4;
        mruArray_V_5_addr_reg_757 <= tmp_fu_308_p1;
        newSel4_reg_794 <= newSel4_fu_583_p3;
        or_cond1_48_reg_767 <= or_cond1_48_fu_431_p2;
        or_cond6_reg_762 <= or_cond6_fu_391_p2;
        sel_tmp13_demorgan_reg_772 <= sel_tmp13_demorgan_fu_501_p2;
        sel_tmp15_reg_777 <= sel_tmp15_fu_519_p2;
        sel_tmp19_reg_788 <= sel_tmp19_fu_549_p2;
        sel_tmp33_demorgan_reg_783 <= sel_tmp33_demorgan_fu_525_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return = grp_fu_656_p10;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dataArray_0_V_ce0 = 1'b1;
    end else begin
        dataArray_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dataArray_1_V_ce0 = 1'b1;
    end else begin
        dataArray_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dataArray_2_V_ce0 = 1'b1;
    end else begin
        dataArray_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dataArray_3_V_ce0 = 1'b1;
    end else begin
        dataArray_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dataArray_4_V_ce0 = 1'b1;
    end else begin
        dataArray_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dataArray_5_V_ce0 = 1'b1;
    end else begin
        dataArray_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dataArray_6_V_ce0 = 1'b1;
    end else begin
        dataArray_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dataArray_7_V_ce0 = 1'b1;
    end else begin
        dataArray_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        mruArray_V_6_ce0 = 1'b1;
    end else begin
        mruArray_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_s_fu_678_p2 == 1'd1))) begin
        mruArray_V_6_we0 = 1'b1;
    end else begin
        mruArray_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign dataArray_0_V_address0 = tmp_fu_308_p1;

assign dataArray_1_V_address0 = tmp_fu_308_p1;

assign dataArray_2_V_address0 = tmp_fu_308_p1;

assign dataArray_3_V_address0 = tmp_fu_308_p1;

assign dataArray_4_V_address0 = tmp_fu_308_p1;

assign dataArray_5_V_address0 = tmp_fu_308_p1;

assign dataArray_6_V_address0 = tmp_fu_308_p1;

assign dataArray_7_V_address0 = tmp_fu_308_p1;

assign grp_fu_656_p9 = ((or_cond3_fu_643_p2[0:0] === 1'b1) ? newSel3_fu_635_p3 : newSel4_reg_794);

integer ap_tvar_int_0;

always @ (i_addr_V) begin
    for (ap_tvar_int_0 = 8 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 7 - 0) begin
            indexReg_V_fu_288_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            indexReg_V_fu_288_p4[ap_tvar_int_0] = i_addr_V[7 - ap_tvar_int_0];
        end
    end
end

assign mruArray_V_6_address0 = mruArray_V_5_addr_reg_757;

assign mruArray_V_6_d0 = {{{{{{{{val_assign_7_fu_719_p2}, {val_assign_6_fu_714_p2}}, {val_assign_5_fu_709_p2}}, {val_assign_4_fu_704_p2}}, {val_assign_3_fu_699_p2}}, {val_assign_2_fu_694_p2}}, {val_assign_1_fu_689_p2}}, {val_assign_fu_684_p2}};

assign newSel1_fu_623_p3 = ((sel_tmp15_reg_777[0:0] === 1'b1) ? 3'd4 : 3'd3);

assign newSel2_fu_569_p2 = (sel_tmp1_fu_471_p2 & or_cond3_49_fu_465_p2);

assign newSel3_fu_635_p3 = ((or_cond_fu_618_p2[0:0] === 1'b1) ? newSel_fu_611_p3 : newSel1_fu_623_p3);

assign newSel4_fu_583_p3 = ((or_cond2_fu_563_p2[0:0] === 1'b1) ? newSel52_cast_cast_fu_555_p3 : newSel54_cast_fu_575_p3);

assign newSel52_cast_cast_fu_555_p3 = ((sel_tmp7_fu_495_p2[0:0] === 1'b1) ? 3'd2 : 3'd1);

assign newSel54_cast_fu_575_p3 = ((newSel2_fu_569_p2[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign newSel_fu_611_p3 = ((sel_tmp19_reg_788[0:0] === 1'b1) ? 3'd6 : 3'd5);

assign or_cond1_48_fu_431_p2 = (tmp_59_fu_417_p3 & tmp_26_5_fu_425_p2);

assign or_cond1_fu_630_p2 = (sel_tmp15_reg_777 | sel_tmp14_fu_596_p2);

assign or_cond2_fu_563_p2 = (sel_tmp7_fu_495_p2 | sel_tmp2_fu_477_p2);

assign or_cond3_49_fu_465_p2 = (tmp_61_fu_451_p3 & tmp_26_7_fu_459_p2);

assign or_cond3_fu_643_p2 = (or_cond_fu_618_p2 | or_cond1_fu_630_p2);

assign or_cond6_fu_391_p2 = (tmp_57_fu_377_p3 & tmp_26_3_fu_385_p2);

assign or_cond7_fu_411_p2 = (tmp_58_fu_397_p3 & tmp_26_4_fu_405_p2);

assign or_cond8_fu_351_p2 = (tmp_55_fu_337_p3 & tmp_26_1_fu_345_p2);

assign or_cond9_fu_371_p2 = (tmp_56_fu_357_p3 & tmp_26_2_fu_365_p2);

assign or_cond_47_fu_331_p2 = (tmp_54_fu_321_p1 & tmp_2_fu_325_p2);

assign or_cond_fu_618_p2 = (sel_tmp19_reg_788 | sel_tmp17_fu_606_p2);

assign sel_tmp13_demorgan_fu_501_p2 = (sel_tmp6_demorgan_fu_483_p2 | or_cond9_fu_371_p2);

assign sel_tmp13_fu_591_p2 = (sel_tmp13_demorgan_reg_772 ^ 1'd1);

assign sel_tmp14_fu_596_p2 = (sel_tmp13_fu_591_p2 & or_cond6_reg_762);

assign sel_tmp15_fu_519_p2 = (sel_tmp_fu_513_p2 & or_cond7_fu_411_p2);

assign sel_tmp16_fu_601_p2 = (sel_tmp33_demorgan_reg_783 ^ 1'd1);

assign sel_tmp17_fu_606_p2 = (sel_tmp16_fu_601_p2 & or_cond1_48_reg_767);

assign sel_tmp18_fu_537_p2 = (sel_tmp46_demorgan_fu_531_p2 ^ 1'd1);

assign sel_tmp19_fu_549_p2 = (tmp_60_fu_437_p3 & tmp1_fu_543_p2);

assign sel_tmp1_fu_471_p2 = (or_cond_47_fu_331_p2 ^ 1'd1);

assign sel_tmp22_demorgan_fu_507_p2 = (sel_tmp13_demorgan_fu_501_p2 | or_cond6_fu_391_p2);

assign sel_tmp2_fu_477_p2 = (sel_tmp1_fu_471_p2 & or_cond8_fu_351_p2);

assign sel_tmp33_demorgan_fu_525_p2 = (sel_tmp22_demorgan_fu_507_p2 | or_cond7_fu_411_p2);

assign sel_tmp46_demorgan_fu_531_p2 = (sel_tmp33_demorgan_fu_525_p2 | or_cond1_48_fu_431_p2);

assign sel_tmp6_demorgan_fu_483_p2 = (or_cond_47_fu_331_p2 | or_cond8_fu_351_p2);

assign sel_tmp6_fu_489_p2 = (sel_tmp6_demorgan_fu_483_p2 ^ 1'd1);

assign sel_tmp7_fu_495_p2 = (sel_tmp6_fu_489_p2 & or_cond9_fu_371_p2);

assign sel_tmp_fu_513_p2 = (sel_tmp22_demorgan_fu_507_p2 ^ 1'd1);

integer ap_tvar_int_1;

always @ (i_addr_V) begin
    for (ap_tvar_int_1 = 24 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 8) begin
            tagReg_V_fu_298_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tagReg_V_fu_298_p4[ap_tvar_int_1] = i_addr_V[31 - ap_tvar_int_1];
        end
    end
end

assign tmp1_fu_543_p2 = (tmp_26_6_fu_445_p2 & sel_tmp18_fu_537_p2);

assign tmp_26_1_fu_345_p2 = ((tagReg_V_fu_298_p4 == tag_1_V_read) ? 1'b1 : 1'b0);

assign tmp_26_2_fu_365_p2 = ((tagReg_V_fu_298_p4 == tag_2_V_read) ? 1'b1 : 1'b0);

assign tmp_26_3_fu_385_p2 = ((tagReg_V_fu_298_p4 == tag_3_V_read) ? 1'b1 : 1'b0);

assign tmp_26_4_fu_405_p2 = ((tagReg_V_fu_298_p4 == tag_4_V_read) ? 1'b1 : 1'b0);

assign tmp_26_5_fu_425_p2 = ((tagReg_V_fu_298_p4 == tag_5_V_read) ? 1'b1 : 1'b0);

assign tmp_26_6_fu_445_p2 = ((tagReg_V_fu_298_p4 == tag_6_V_read) ? 1'b1 : 1'b0);

assign tmp_26_7_fu_459_p2 = ((tagReg_V_fu_298_p4 == tag_7_V_read) ? 1'b1 : 1'b0);

assign tmp_2_fu_325_p2 = ((tagReg_V_fu_298_p4 == tag_0_V_read) ? 1'b1 : 1'b0);

assign tmp_54_fu_321_p1 = valid_V[0:0];

assign tmp_55_fu_337_p3 = valid_V[32'd1];

assign tmp_56_fu_357_p3 = valid_V[32'd2];

assign tmp_57_fu_377_p3 = valid_V[32'd3];

assign tmp_58_fu_397_p3 = valid_V[32'd4];

assign tmp_59_fu_417_p3 = valid_V[32'd5];

assign tmp_60_fu_437_p3 = valid_V[32'd6];

assign tmp_61_fu_451_p3 = valid_V[32'd7];

assign tmp_fu_308_p1 = indexReg_V_fu_288_p4;

assign tmp_s_fu_678_p2 = ((mruArray_V_6_q0 == 8'd255) ? 1'b1 : 1'b0);

assign val_assign_1_fu_689_p2 = ((indexReg_V_reg_745 == 8'd1) ? 1'b1 : 1'b0);

assign val_assign_2_fu_694_p2 = ((indexReg_V_reg_745 == 8'd2) ? 1'b1 : 1'b0);

assign val_assign_3_fu_699_p2 = ((indexReg_V_reg_745 == 8'd3) ? 1'b1 : 1'b0);

assign val_assign_4_fu_704_p2 = ((indexReg_V_reg_745 == 8'd4) ? 1'b1 : 1'b0);

assign val_assign_5_fu_709_p2 = ((indexReg_V_reg_745 == 8'd5) ? 1'b1 : 1'b0);

assign val_assign_6_fu_714_p2 = ((indexReg_V_reg_745 == 8'd6) ? 1'b1 : 1'b0);

assign val_assign_7_fu_719_p2 = ((indexReg_V_reg_745 == 8'd7) ? 1'b1 : 1'b0);

assign val_assign_fu_684_p2 = ((indexReg_V_reg_745 == 8'd0) ? 1'b1 : 1'b0);

endmodule //ReadHit
