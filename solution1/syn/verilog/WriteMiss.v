// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module WriteMiss (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_addr_V,
        i_wdata_V,
        m_axi_dram_V_AWVALID,
        m_axi_dram_V_AWREADY,
        m_axi_dram_V_AWADDR,
        m_axi_dram_V_AWID,
        m_axi_dram_V_AWLEN,
        m_axi_dram_V_AWSIZE,
        m_axi_dram_V_AWBURST,
        m_axi_dram_V_AWLOCK,
        m_axi_dram_V_AWCACHE,
        m_axi_dram_V_AWPROT,
        m_axi_dram_V_AWQOS,
        m_axi_dram_V_AWREGION,
        m_axi_dram_V_AWUSER,
        m_axi_dram_V_WVALID,
        m_axi_dram_V_WREADY,
        m_axi_dram_V_WDATA,
        m_axi_dram_V_WSTRB,
        m_axi_dram_V_WLAST,
        m_axi_dram_V_WID,
        m_axi_dram_V_WUSER,
        m_axi_dram_V_ARVALID,
        m_axi_dram_V_ARREADY,
        m_axi_dram_V_ARADDR,
        m_axi_dram_V_ARID,
        m_axi_dram_V_ARLEN,
        m_axi_dram_V_ARSIZE,
        m_axi_dram_V_ARBURST,
        m_axi_dram_V_ARLOCK,
        m_axi_dram_V_ARCACHE,
        m_axi_dram_V_ARPROT,
        m_axi_dram_V_ARQOS,
        m_axi_dram_V_ARREGION,
        m_axi_dram_V_ARUSER,
        m_axi_dram_V_RVALID,
        m_axi_dram_V_RREADY,
        m_axi_dram_V_RDATA,
        m_axi_dram_V_RLAST,
        m_axi_dram_V_RID,
        m_axi_dram_V_RUSER,
        m_axi_dram_V_RRESP,
        m_axi_dram_V_BVALID,
        m_axi_dram_V_BREADY,
        m_axi_dram_V_BRESP,
        m_axi_dram_V_BID,
        m_axi_dram_V_BUSER,
        dram_V_offset,
        valid_V,
        tag_0_V_read,
        tag_1_V_read,
        tag_2_V_read,
        tag_3_V_read,
        tag_4_V_read,
        tag_5_V_read,
        tag_6_V_read,
        tag_7_V_read,
        validArray_V_2_address0,
        validArray_V_2_ce0,
        validArray_V_2_we0,
        validArray_V_2_d0,
        tagArray_0_V_address0,
        tagArray_0_V_ce0,
        tagArray_0_V_we0,
        tagArray_0_V_d0,
        tagArray_1_V_address0,
        tagArray_1_V_ce0,
        tagArray_1_V_we0,
        tagArray_1_V_d0,
        tagArray_2_V_address0,
        tagArray_2_V_ce0,
        tagArray_2_V_we0,
        tagArray_2_V_d0,
        tagArray_3_V_address0,
        tagArray_3_V_ce0,
        tagArray_3_V_we0,
        tagArray_3_V_d0,
        tagArray_4_V_address0,
        tagArray_4_V_ce0,
        tagArray_4_V_we0,
        tagArray_4_V_d0,
        tagArray_5_V_address0,
        tagArray_5_V_ce0,
        tagArray_5_V_we0,
        tagArray_5_V_d0,
        tagArray_6_V_address0,
        tagArray_6_V_ce0,
        tagArray_6_V_we0,
        tagArray_6_V_d0,
        tagArray_7_V_address0,
        tagArray_7_V_ce0,
        tagArray_7_V_we0,
        tagArray_7_V_d0,
        mruArray_V_address0,
        mruArray_V_ce0,
        mruArray_V_we0,
        mruArray_V_d0,
        mruArray_V_q0,
        dataArray_V_0_address0,
        dataArray_V_0_ce0,
        dataArray_V_0_we0,
        dataArray_V_0_d0,
        dataArray_V_0_q0,
        dataArray_V_1_address0,
        dataArray_V_1_ce0,
        dataArray_V_1_we0,
        dataArray_V_1_d0,
        dataArray_V_1_q0,
        dataArray_V_2_address0,
        dataArray_V_2_ce0,
        dataArray_V_2_we0,
        dataArray_V_2_d0,
        dataArray_V_2_q0,
        dataArray_V_3_address0,
        dataArray_V_3_ce0,
        dataArray_V_3_we0,
        dataArray_V_3_d0,
        dataArray_V_3_q0,
        dataArray_V_4_address0,
        dataArray_V_4_ce0,
        dataArray_V_4_we0,
        dataArray_V_4_d0,
        dataArray_V_4_q0,
        dataArray_V_5_address0,
        dataArray_V_5_ce0,
        dataArray_V_5_we0,
        dataArray_V_5_d0,
        dataArray_V_5_q0,
        dataArray_V_6_address0,
        dataArray_V_6_ce0,
        dataArray_V_6_we0,
        dataArray_V_6_d0,
        dataArray_V_6_q0,
        dataArray_V_7_address0,
        dataArray_V_7_ce0,
        dataArray_V_7_we0,
        dataArray_V_7_d0,
        dataArray_V_7_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] i_addr_V;
input  [511:0] i_wdata_V;
output   m_axi_dram_V_AWVALID;
input   m_axi_dram_V_AWREADY;
output  [31:0] m_axi_dram_V_AWADDR;
output  [0:0] m_axi_dram_V_AWID;
output  [31:0] m_axi_dram_V_AWLEN;
output  [2:0] m_axi_dram_V_AWSIZE;
output  [1:0] m_axi_dram_V_AWBURST;
output  [1:0] m_axi_dram_V_AWLOCK;
output  [3:0] m_axi_dram_V_AWCACHE;
output  [2:0] m_axi_dram_V_AWPROT;
output  [3:0] m_axi_dram_V_AWQOS;
output  [3:0] m_axi_dram_V_AWREGION;
output  [0:0] m_axi_dram_V_AWUSER;
output   m_axi_dram_V_WVALID;
input   m_axi_dram_V_WREADY;
output  [511:0] m_axi_dram_V_WDATA;
output  [63:0] m_axi_dram_V_WSTRB;
output   m_axi_dram_V_WLAST;
output  [0:0] m_axi_dram_V_WID;
output  [0:0] m_axi_dram_V_WUSER;
output   m_axi_dram_V_ARVALID;
input   m_axi_dram_V_ARREADY;
output  [31:0] m_axi_dram_V_ARADDR;
output  [0:0] m_axi_dram_V_ARID;
output  [31:0] m_axi_dram_V_ARLEN;
output  [2:0] m_axi_dram_V_ARSIZE;
output  [1:0] m_axi_dram_V_ARBURST;
output  [1:0] m_axi_dram_V_ARLOCK;
output  [3:0] m_axi_dram_V_ARCACHE;
output  [2:0] m_axi_dram_V_ARPROT;
output  [3:0] m_axi_dram_V_ARQOS;
output  [3:0] m_axi_dram_V_ARREGION;
output  [0:0] m_axi_dram_V_ARUSER;
input   m_axi_dram_V_RVALID;
output   m_axi_dram_V_RREADY;
input  [511:0] m_axi_dram_V_RDATA;
input   m_axi_dram_V_RLAST;
input  [0:0] m_axi_dram_V_RID;
input  [0:0] m_axi_dram_V_RUSER;
input  [1:0] m_axi_dram_V_RRESP;
input   m_axi_dram_V_BVALID;
output   m_axi_dram_V_BREADY;
input  [1:0] m_axi_dram_V_BRESP;
input  [0:0] m_axi_dram_V_BID;
input  [0:0] m_axi_dram_V_BUSER;
input  [25:0] dram_V_offset;
input  [7:0] valid_V;
input  [23:0] tag_0_V_read;
input  [23:0] tag_1_V_read;
input  [23:0] tag_2_V_read;
input  [23:0] tag_3_V_read;
input  [23:0] tag_4_V_read;
input  [23:0] tag_5_V_read;
input  [23:0] tag_6_V_read;
input  [23:0] tag_7_V_read;
output  [7:0] validArray_V_2_address0;
output   validArray_V_2_ce0;
output   validArray_V_2_we0;
output  [7:0] validArray_V_2_d0;
output  [7:0] tagArray_0_V_address0;
output   tagArray_0_V_ce0;
output   tagArray_0_V_we0;
output  [23:0] tagArray_0_V_d0;
output  [7:0] tagArray_1_V_address0;
output   tagArray_1_V_ce0;
output   tagArray_1_V_we0;
output  [23:0] tagArray_1_V_d0;
output  [7:0] tagArray_2_V_address0;
output   tagArray_2_V_ce0;
output   tagArray_2_V_we0;
output  [23:0] tagArray_2_V_d0;
output  [7:0] tagArray_3_V_address0;
output   tagArray_3_V_ce0;
output   tagArray_3_V_we0;
output  [23:0] tagArray_3_V_d0;
output  [7:0] tagArray_4_V_address0;
output   tagArray_4_V_ce0;
output   tagArray_4_V_we0;
output  [23:0] tagArray_4_V_d0;
output  [7:0] tagArray_5_V_address0;
output   tagArray_5_V_ce0;
output   tagArray_5_V_we0;
output  [23:0] tagArray_5_V_d0;
output  [7:0] tagArray_6_V_address0;
output   tagArray_6_V_ce0;
output   tagArray_6_V_we0;
output  [23:0] tagArray_6_V_d0;
output  [7:0] tagArray_7_V_address0;
output   tagArray_7_V_ce0;
output   tagArray_7_V_we0;
output  [23:0] tagArray_7_V_d0;
output  [7:0] mruArray_V_address0;
output   mruArray_V_ce0;
output   mruArray_V_we0;
output  [7:0] mruArray_V_d0;
input  [7:0] mruArray_V_q0;
output  [7:0] dataArray_V_0_address0;
output   dataArray_V_0_ce0;
output   dataArray_V_0_we0;
output  [511:0] dataArray_V_0_d0;
input  [511:0] dataArray_V_0_q0;
output  [7:0] dataArray_V_1_address0;
output   dataArray_V_1_ce0;
output   dataArray_V_1_we0;
output  [511:0] dataArray_V_1_d0;
input  [511:0] dataArray_V_1_q0;
output  [7:0] dataArray_V_2_address0;
output   dataArray_V_2_ce0;
output   dataArray_V_2_we0;
output  [511:0] dataArray_V_2_d0;
input  [511:0] dataArray_V_2_q0;
output  [7:0] dataArray_V_3_address0;
output   dataArray_V_3_ce0;
output   dataArray_V_3_we0;
output  [511:0] dataArray_V_3_d0;
input  [511:0] dataArray_V_3_q0;
output  [7:0] dataArray_V_4_address0;
output   dataArray_V_4_ce0;
output   dataArray_V_4_we0;
output  [511:0] dataArray_V_4_d0;
input  [511:0] dataArray_V_4_q0;
output  [7:0] dataArray_V_5_address0;
output   dataArray_V_5_ce0;
output   dataArray_V_5_we0;
output  [511:0] dataArray_V_5_d0;
input  [511:0] dataArray_V_5_q0;
output  [7:0] dataArray_V_6_address0;
output   dataArray_V_6_ce0;
output   dataArray_V_6_we0;
output  [511:0] dataArray_V_6_d0;
input  [511:0] dataArray_V_6_q0;
output  [7:0] dataArray_V_7_address0;
output   dataArray_V_7_ce0;
output   dataArray_V_7_we0;
output  [511:0] dataArray_V_7_d0;
input  [511:0] dataArray_V_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_dram_V_AWVALID;
reg m_axi_dram_V_WVALID;
reg m_axi_dram_V_BREADY;
reg validArray_V_2_ce0;
reg validArray_V_2_we0;
reg[7:0] validArray_V_2_d0;
reg tagArray_0_V_ce0;
reg tagArray_0_V_we0;
reg tagArray_1_V_ce0;
reg tagArray_1_V_we0;
reg tagArray_2_V_ce0;
reg tagArray_2_V_we0;
reg tagArray_3_V_ce0;
reg tagArray_3_V_we0;
reg tagArray_4_V_ce0;
reg tagArray_4_V_we0;
reg tagArray_5_V_ce0;
reg tagArray_5_V_we0;
reg tagArray_6_V_ce0;
reg tagArray_6_V_we0;
reg tagArray_7_V_ce0;
reg tagArray_7_V_we0;
reg[7:0] mruArray_V_address0;
reg mruArray_V_ce0;
reg mruArray_V_we0;
reg[7:0] dataArray_V_0_address0;
reg dataArray_V_0_ce0;
reg dataArray_V_0_we0;
reg[7:0] dataArray_V_1_address0;
reg dataArray_V_1_ce0;
reg dataArray_V_1_we0;
reg[7:0] dataArray_V_2_address0;
reg dataArray_V_2_ce0;
reg dataArray_V_2_we0;
reg[7:0] dataArray_V_3_address0;
reg dataArray_V_3_ce0;
reg dataArray_V_3_we0;
reg[7:0] dataArray_V_4_address0;
reg dataArray_V_4_ce0;
reg dataArray_V_4_we0;
reg[7:0] dataArray_V_5_address0;
reg dataArray_V_5_ce0;
reg dataArray_V_5_we0;
reg[7:0] dataArray_V_6_address0;
reg dataArray_V_6_ce0;
reg dataArray_V_6_we0;
reg[7:0] dataArray_V_7_address0;
reg dataArray_V_7_ce0;
reg dataArray_V_7_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dram_V_blk_n_AW;
wire    ap_CS_fsm_state5;
reg    dram_V_blk_n_W;
wire    ap_CS_fsm_state6;
reg    dram_V_blk_n_B;
wire    ap_CS_fsm_state11;
reg   [0:0] isEvict_2_reg_678;
reg   [7:0] indexReg_V_fu_734_p4;
reg   [7:0] indexReg_V_reg_1063;
reg   [23:0] tagReg_V_fu_744_p4;
reg   [23:0] tagReg_V_reg_1076;
wire   [63:0] tmp_fu_754_p1;
reg   [63:0] tmp_reg_1088;
reg   [7:0] mruArray_V_addr_reg_1117;
wire    ap_CS_fsm_state2;
reg   [7:0] tempMru_V_reg_1191;
wire   [3:0] p_3_fu_825_p3;
wire   [0:0] tmp_1_fu_759_p2;
wire   [0:0] tmp_4_fu_765_p1;
wire   [0:0] tmp_7_fu_769_p3;
wire   [0:0] tmp_9_fu_777_p3;
wire   [0:0] tmp_11_fu_785_p3;
wire   [0:0] tmp_13_fu_793_p3;
wire   [0:0] tmp_15_fu_801_p3;
wire   [0:0] tmp_17_fu_809_p3;
wire   [3:0] p_s_fu_893_p3;
wire   [0:0] tmp_2_fu_833_p1;
wire   [0:0] tmp_5_fu_837_p3;
wire   [0:0] tmp_8_fu_845_p3;
wire   [0:0] tmp_10_fu_853_p3;
wire   [0:0] tmp_12_fu_861_p3;
wire   [0:0] tmp_14_fu_869_p3;
wire   [0:0] tmp_16_fu_877_p3;
wire   [31:0] Hi_assign_cast_fu_901_p1;
reg   [31:0] Hi_assign_cast_reg_1251;
wire    ap_CS_fsm_state3;
wire   [2:0] tmp_20_fu_905_p1;
reg   [2:0] tmp_20_reg_1257;
wire   [0:0] ap_phi_mux_isEvict_2_phi_fu_683_p32;
wire    ap_CS_fsm_state4;
wire   [32:0] sum_fu_958_p2;
reg   [32:0] sum_reg_1343;
wire   [511:0] grp_fu_934_p10;
reg   [511:0] tmp_3_reg_1348;
reg    ap_sig_ioackin_m_axi_dram_V_AWREADY;
reg   [7:0] tempValid_V_1_reg_572;
reg   [3:0] Hi_assign_reg_619;
wire   [7:0] dataArray_V_0_addr_gep_fu_447_p3;
wire   [7:0] dataArray_V_1_addr_gep_fu_454_p3;
wire   [7:0] dataArray_V_2_addr_gep_fu_461_p3;
wire   [7:0] dataArray_V_3_addr_gep_fu_468_p3;
wire   [7:0] dataArray_V_4_addr_gep_fu_475_p3;
wire   [7:0] dataArray_V_5_addr_gep_fu_482_p3;
wire   [7:0] dataArray_V_6_addr_gep_fu_489_p3;
wire   [7:0] dataArray_V_7_addr_gep_fu_496_p3;
wire   [63:0] sum_cast_fu_964_p1;
reg    ap_reg_ioackin_m_axi_dram_V_AWREADY;
reg    ap_block_state11;
reg    ap_reg_ioackin_m_axi_dram_V_WREADY;
reg    ap_sig_ioackin_m_axi_dram_V_WREADY;
wire   [0:0] tmp_6_fu_996_p2;
wire   [2:0] tmp_21_fu_974_p1;
wire   [0:0] tmp_19_fu_817_p3;
wire   [0:0] tmp_18_fu_885_p3;
wire   [2:0] grp_fu_909_p9;
wire   [23:0] grp_fu_909_p10;
wire   [31:0] p_Result_s_fu_923_p3;
wire   [32:0] sext_cast_fu_955_p1;
wire   [32:0] tmp_9_cast_fu_930_p1;
reg   [7:0] p_Result_2_fu_988_p4;
wire   [0:0] val_assign_7_fu_1037_p2;
wire   [0:0] val_assign_6_fu_1032_p2;
wire   [0:0] val_assign_5_fu_1027_p2;
wire   [0:0] val_assign_4_fu_1022_p2;
wire   [0:0] val_assign_3_fu_1017_p2;
wire   [0:0] val_assign_2_fu_1012_p2;
wire   [0:0] val_assign_1_fu_1007_p2;
wire   [0:0] val_assign_fu_1002_p2;
reg    grp_fu_934_ce;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_reg_ioackin_m_axi_dram_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_dram_V_WREADY = 1'b0;
end

PLRUCache_mux_83_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 24 ),
    .din3_WIDTH( 24 ),
    .din4_WIDTH( 24 ),
    .din5_WIDTH( 24 ),
    .din6_WIDTH( 24 ),
    .din7_WIDTH( 24 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 24 ))
PLRUCache_mux_83_24_2_1_U75(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tag_0_V_read),
    .din1(tag_1_V_read),
    .din2(tag_2_V_read),
    .din3(tag_3_V_read),
    .din4(tag_4_V_read),
    .din5(tag_5_V_read),
    .din6(tag_6_V_read),
    .din7(tag_7_V_read),
    .din8(grp_fu_909_p9),
    .ce(1'b1),
    .dout(grp_fu_909_p10)
);

PLRUCache_mux_83_512_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 512 ),
    .din2_WIDTH( 512 ),
    .din3_WIDTH( 512 ),
    .din4_WIDTH( 512 ),
    .din5_WIDTH( 512 ),
    .din6_WIDTH( 512 ),
    .din7_WIDTH( 512 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 512 ))
PLRUCache_mux_83_512_2_1_U76(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dataArray_V_0_q0),
    .din1(dataArray_V_1_q0),
    .din2(dataArray_V_2_q0),
    .din3(dataArray_V_3_q0),
    .din4(dataArray_V_4_q0),
    .din5(dataArray_V_5_q0),
    .din6(dataArray_V_6_q0),
    .din7(dataArray_V_7_q0),
    .din8(tmp_20_reg_1257),
    .ce(grp_fu_934_ce),
    .dout(grp_fu_934_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_dram_V_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((ap_sig_ioackin_m_axi_dram_V_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_dram_V_AWREADY <= 1'b0;
            end else if ((m_axi_dram_V_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_dram_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_dram_V_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            if ((ap_sig_ioackin_m_axi_dram_V_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_dram_V_WREADY <= 1'b0;
            end else if ((m_axi_dram_V_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_dram_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_759_p2 == 1'd0) & (tmp_17_fu_809_p3 == 1'd1) & (tmp_15_fu_801_p3 == 1'd1) & (tmp_13_fu_793_p3 == 1'd1) & (tmp_11_fu_785_p3 == 1'd1) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        Hi_assign_reg_619 <= p_3_fu_825_p3;
    end else if (((tmp_16_fu_877_p3 == 1'd1) & (tmp_14_fu_869_p3 == 1'd1) & (tmp_12_fu_861_p3 == 1'd1) & (tmp_10_fu_853_p3 == 1'd1) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        Hi_assign_reg_619 <= p_s_fu_893_p3;
    end else if ((((tmp_2_fu_833_p1 == 1'd0) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_4_fu_765_p1 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        Hi_assign_reg_619 <= 4'd0;
    end else if ((((tmp_5_fu_837_p3 == 1'd0) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_7_fu_769_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        Hi_assign_reg_619 <= 4'd1;
    end else if ((((tmp_8_fu_845_p3 == 1'd0) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_9_fu_777_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        Hi_assign_reg_619 <= 4'd2;
    end else if ((((tmp_10_fu_853_p3 == 1'd0) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_11_fu_785_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        Hi_assign_reg_619 <= 4'd3;
    end else if ((((tmp_12_fu_861_p3 == 1'd0) & (tmp_10_fu_853_p3 == 1'd1) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_13_fu_793_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_11_fu_785_p3 == 1'd1) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        Hi_assign_reg_619 <= 4'd4;
    end else if ((((tmp_14_fu_869_p3 == 1'd0) & (tmp_12_fu_861_p3 == 1'd1) & (tmp_10_fu_853_p3 == 1'd1) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_15_fu_801_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_13_fu_793_p3 == 1'd1) & (tmp_11_fu_785_p3 == 1'd1) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        Hi_assign_reg_619 <= 4'd5;
    end else if ((((tmp_16_fu_877_p3 == 1'd0) & (tmp_14_fu_869_p3 == 1'd1) & (tmp_12_fu_861_p3 == 1'd1) & (tmp_10_fu_853_p3 == 1'd1) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_17_fu_809_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_15_fu_801_p3 == 1'd1) & (tmp_13_fu_793_p3 == 1'd1) & (tmp_11_fu_785_p3 == 1'd1) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        Hi_assign_reg_619 <= 4'd6;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_4_fu_765_p1 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_7_fu_769_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_9_fu_777_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_11_fu_785_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_13_fu_793_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_11_fu_785_p3 == 1'd1) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_15_fu_801_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_13_fu_793_p3 == 1'd1) & (tmp_11_fu_785_p3 == 1'd1) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_17_fu_809_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_15_fu_801_p3 == 1'd1) & (tmp_13_fu_793_p3 == 1'd1) & (tmp_11_fu_785_p3 == 1'd1) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_1_fu_759_p2 == 1'd0) & (tmp_17_fu_809_p3 == 1'd1) & (tmp_15_fu_801_p3 == 1'd1) & (tmp_13_fu_793_p3 == 1'd1) & (tmp_11_fu_785_p3 == 1'd1) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        isEvict_2_reg_678 <= 1'd0;
    end else if ((((tmp_2_fu_833_p1 == 1'd0) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_5_fu_837_p3 == 1'd0) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_8_fu_845_p3 == 1'd0) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_10_fu_853_p3 == 1'd0) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_12_fu_861_p3 == 1'd0) & (tmp_10_fu_853_p3 == 1'd1) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_14_fu_869_p3 == 1'd0) & (tmp_12_fu_861_p3 == 1'd1) & (tmp_10_fu_853_p3 == 1'd1) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_16_fu_877_p3 == 1'd0) & (tmp_14_fu_869_p3 == 1'd1) & (tmp_12_fu_861_p3 == 1'd1) & (tmp_10_fu_853_p3 == 1'd1) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_16_fu_877_p3 == 1'd1) & (tmp_14_fu_869_p3 == 1'd1) & (tmp_12_fu_861_p3 == 1'd1) & (tmp_10_fu_853_p3 == 1'd1) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        isEvict_2_reg_678 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_4_fu_765_p1 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_7_fu_769_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_9_fu_777_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_11_fu_785_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_13_fu_793_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_11_fu_785_p3 == 1'd1) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_15_fu_801_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_13_fu_793_p3 == 1'd1) & (tmp_11_fu_785_p3 == 1'd1) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_17_fu_809_p3 == 1'd0) & (tmp_1_fu_759_p2 == 1'd0) & (tmp_15_fu_801_p3 == 1'd1) & (tmp_13_fu_793_p3 == 1'd1) & (tmp_11_fu_785_p3 == 1'd1) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_1_fu_759_p2 == 1'd0) & (tmp_17_fu_809_p3 == 1'd1) & (tmp_15_fu_801_p3 == 1'd1) & (tmp_13_fu_793_p3 == 1'd1) & (tmp_11_fu_785_p3 == 1'd1) & (tmp_9_fu_777_p3 == 1'd1) & (tmp_7_fu_769_p3 == 1'd1) & (tmp_4_fu_765_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        tempValid_V_1_reg_572 <= valid_V;
    end else if ((((tmp_2_fu_833_p1 == 1'd0) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_5_fu_837_p3 == 1'd0) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_8_fu_845_p3 == 1'd0) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_10_fu_853_p3 == 1'd0) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_12_fu_861_p3 == 1'd0) & (tmp_10_fu_853_p3 == 1'd1) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_14_fu_869_p3 == 1'd0) & (tmp_12_fu_861_p3 == 1'd1) & (tmp_10_fu_853_p3 == 1'd1) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_16_fu_877_p3 == 1'd0) & (tmp_14_fu_869_p3 == 1'd1) & (tmp_12_fu_861_p3 == 1'd1) & (tmp_10_fu_853_p3 == 1'd1) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_16_fu_877_p3 == 1'd1) & (tmp_14_fu_869_p3 == 1'd1) & (tmp_12_fu_861_p3 == 1'd1) & (tmp_10_fu_853_p3 == 1'd1) & (tmp_8_fu_845_p3 == 1'd1) & (tmp_5_fu_837_p3 == 1'd1) & (tmp_2_fu_833_p1 == 1'd1) & (tmp_1_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        tempValid_V_1_reg_572 <= 8'd255;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Hi_assign_cast_reg_1251[3 : 0] <= Hi_assign_cast_fu_901_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indexReg_V_reg_1063 <= indexReg_V_fu_734_p4;
        mruArray_V_addr_reg_1117 <= tmp_fu_754_p1;
        tagReg_V_reg_1076 <= tagReg_V_fu_744_p4;
        tmp_reg_1088[7 : 0] <= tmp_fu_754_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sum_reg_1343 <= sum_fu_958_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tempMru_V_reg_1191 <= mruArray_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_isEvict_2_phi_fu_683_p32 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_20_reg_1257 <= tmp_20_fu_905_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_m_axi_dram_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_3_reg_1348 <= grp_fu_934_p10;
    end
end

always @ (*) begin
    if (((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_dram_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_dram_V_AWREADY = m_axi_dram_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_dram_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_dram_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_dram_V_WREADY = m_axi_dram_V_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_dram_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dataArray_V_0_address0 = dataArray_V_0_addr_gep_fu_447_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dataArray_V_0_address0 = tmp_reg_1088;
    end else begin
        dataArray_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11)))) begin
        dataArray_V_0_ce0 = 1'b1;
    end else begin
        dataArray_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        dataArray_V_0_we0 = 1'b1;
    end else begin
        dataArray_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dataArray_V_1_address0 = dataArray_V_1_addr_gep_fu_454_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dataArray_V_1_address0 = tmp_reg_1088;
    end else begin
        dataArray_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11)))) begin
        dataArray_V_1_ce0 = 1'b1;
    end else begin
        dataArray_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        dataArray_V_1_we0 = 1'b1;
    end else begin
        dataArray_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dataArray_V_2_address0 = dataArray_V_2_addr_gep_fu_461_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dataArray_V_2_address0 = tmp_reg_1088;
    end else begin
        dataArray_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11)))) begin
        dataArray_V_2_ce0 = 1'b1;
    end else begin
        dataArray_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd2) & (1'b1 == ap_CS_fsm_state11))) begin
        dataArray_V_2_we0 = 1'b1;
    end else begin
        dataArray_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dataArray_V_3_address0 = dataArray_V_3_addr_gep_fu_468_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dataArray_V_3_address0 = tmp_reg_1088;
    end else begin
        dataArray_V_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11)))) begin
        dataArray_V_3_ce0 = 1'b1;
    end else begin
        dataArray_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd3) & (1'b1 == ap_CS_fsm_state11))) begin
        dataArray_V_3_we0 = 1'b1;
    end else begin
        dataArray_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dataArray_V_4_address0 = dataArray_V_4_addr_gep_fu_475_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dataArray_V_4_address0 = tmp_reg_1088;
    end else begin
        dataArray_V_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11)))) begin
        dataArray_V_4_ce0 = 1'b1;
    end else begin
        dataArray_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd4) & (1'b1 == ap_CS_fsm_state11))) begin
        dataArray_V_4_we0 = 1'b1;
    end else begin
        dataArray_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dataArray_V_5_address0 = dataArray_V_5_addr_gep_fu_482_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dataArray_V_5_address0 = tmp_reg_1088;
    end else begin
        dataArray_V_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11)))) begin
        dataArray_V_5_ce0 = 1'b1;
    end else begin
        dataArray_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd5) & (1'b1 == ap_CS_fsm_state11))) begin
        dataArray_V_5_we0 = 1'b1;
    end else begin
        dataArray_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dataArray_V_6_address0 = dataArray_V_6_addr_gep_fu_489_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dataArray_V_6_address0 = tmp_reg_1088;
    end else begin
        dataArray_V_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11)))) begin
        dataArray_V_6_ce0 = 1'b1;
    end else begin
        dataArray_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd6) & (1'b1 == ap_CS_fsm_state11))) begin
        dataArray_V_6_we0 = 1'b1;
    end else begin
        dataArray_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dataArray_V_7_address0 = dataArray_V_7_addr_gep_fu_496_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dataArray_V_7_address0 = tmp_reg_1088;
    end else begin
        dataArray_V_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11)))) begin
        dataArray_V_7_ce0 = 1'b1;
    end else begin
        dataArray_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd7) & (1'b1 == ap_CS_fsm_state11))) begin
        dataArray_V_7_we0 = 1'b1;
    end else begin
        dataArray_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dram_V_blk_n_AW = m_axi_dram_V_AWREADY;
    end else begin
        dram_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((isEvict_2_reg_678 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        dram_V_blk_n_B = m_axi_dram_V_BVALID;
    end else begin
        dram_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dram_V_blk_n_W = m_axi_dram_V_WREADY;
    end else begin
        dram_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_sig_ioackin_m_axi_dram_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        grp_fu_934_ce = 1'b1;
    end else begin
        grp_fu_934_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_dram_V_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_dram_V_AWVALID = 1'b1;
    end else begin
        m_axi_dram_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (isEvict_2_reg_678 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_dram_V_BREADY = 1'b1;
    end else begin
        m_axi_dram_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_dram_V_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        m_axi_dram_V_WVALID = 1'b1;
    end else begin
        m_axi_dram_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mruArray_V_address0 = mruArray_V_addr_reg_1117;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        mruArray_V_address0 = tmp_fu_754_p1;
    end else begin
        mruArray_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11)))) begin
        mruArray_V_ce0 = 1'b1;
    end else begin
        mruArray_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_6_fu_996_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        mruArray_V_we0 = 1'b1;
    end else begin
        mruArray_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_0_V_ce0 = 1'b1;
    end else begin
        tagArray_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_0_V_we0 = 1'b1;
    end else begin
        tagArray_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_1_V_ce0 = 1'b1;
    end else begin
        tagArray_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_1_V_we0 = 1'b1;
    end else begin
        tagArray_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_2_V_ce0 = 1'b1;
    end else begin
        tagArray_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd2) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_2_V_we0 = 1'b1;
    end else begin
        tagArray_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_3_V_ce0 = 1'b1;
    end else begin
        tagArray_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd3) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_3_V_we0 = 1'b1;
    end else begin
        tagArray_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_4_V_ce0 = 1'b1;
    end else begin
        tagArray_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd4) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_4_V_we0 = 1'b1;
    end else begin
        tagArray_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_5_V_ce0 = 1'b1;
    end else begin
        tagArray_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd5) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_5_V_we0 = 1'b1;
    end else begin
        tagArray_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_6_V_ce0 = 1'b1;
    end else begin
        tagArray_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd6) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_6_V_we0 = 1'b1;
    end else begin
        tagArray_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_7_V_ce0 = 1'b1;
    end else begin
        tagArray_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (tmp_21_fu_974_p1 == 3'd7) & (1'b1 == ap_CS_fsm_state11))) begin
        tagArray_7_V_we0 = 1'b1;
    end else begin
        tagArray_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11))) begin
        validArray_V_2_ce0 = 1'b1;
    end else begin
        validArray_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11))) begin
        validArray_V_2_we0 = 1'b1;
    end else begin
        validArray_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((ap_phi_mux_isEvict_2_phi_fu_683_p32 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_m_axi_dram_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((ap_sig_ioackin_m_axi_dram_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if ((~((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_cast_fu_901_p1 = Hi_assign_reg_619;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state11 = ((m_axi_dram_V_BVALID == 1'b0) & (isEvict_2_reg_678 == 1'd1));
end

assign ap_phi_mux_isEvict_2_phi_fu_683_p32 = isEvict_2_reg_678;

assign dataArray_V_0_addr_gep_fu_447_p3 = tmp_reg_1088;

assign dataArray_V_0_d0 = i_wdata_V;

assign dataArray_V_1_addr_gep_fu_454_p3 = tmp_reg_1088;

assign dataArray_V_1_d0 = i_wdata_V;

assign dataArray_V_2_addr_gep_fu_461_p3 = tmp_reg_1088;

assign dataArray_V_2_d0 = i_wdata_V;

assign dataArray_V_3_addr_gep_fu_468_p3 = tmp_reg_1088;

assign dataArray_V_3_d0 = i_wdata_V;

assign dataArray_V_4_addr_gep_fu_475_p3 = tmp_reg_1088;

assign dataArray_V_4_d0 = i_wdata_V;

assign dataArray_V_5_addr_gep_fu_482_p3 = tmp_reg_1088;

assign dataArray_V_5_d0 = i_wdata_V;

assign dataArray_V_6_addr_gep_fu_489_p3 = tmp_reg_1088;

assign dataArray_V_6_d0 = i_wdata_V;

assign dataArray_V_7_addr_gep_fu_496_p3 = tmp_reg_1088;

assign dataArray_V_7_d0 = i_wdata_V;

assign grp_fu_909_p9 = Hi_assign_reg_619[2:0];

integer ap_tvar_int_0;

always @ (i_addr_V) begin
    for (ap_tvar_int_0 = 8 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 7 - 0) begin
            indexReg_V_fu_734_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            indexReg_V_fu_734_p4[ap_tvar_int_0] = i_addr_V[7 - ap_tvar_int_0];
        end
    end
end

assign m_axi_dram_V_ARADDR = 32'd0;

assign m_axi_dram_V_ARBURST = 2'd0;

assign m_axi_dram_V_ARCACHE = 4'd0;

assign m_axi_dram_V_ARID = 1'd0;

assign m_axi_dram_V_ARLEN = 32'd0;

assign m_axi_dram_V_ARLOCK = 2'd0;

assign m_axi_dram_V_ARPROT = 3'd0;

assign m_axi_dram_V_ARQOS = 4'd0;

assign m_axi_dram_V_ARREGION = 4'd0;

assign m_axi_dram_V_ARSIZE = 3'd0;

assign m_axi_dram_V_ARUSER = 1'd0;

assign m_axi_dram_V_ARVALID = 1'b0;

assign m_axi_dram_V_AWADDR = sum_cast_fu_964_p1;

assign m_axi_dram_V_AWBURST = 2'd0;

assign m_axi_dram_V_AWCACHE = 4'd0;

assign m_axi_dram_V_AWID = 1'd0;

assign m_axi_dram_V_AWLEN = 32'd1;

assign m_axi_dram_V_AWLOCK = 2'd0;

assign m_axi_dram_V_AWPROT = 3'd0;

assign m_axi_dram_V_AWQOS = 4'd0;

assign m_axi_dram_V_AWREGION = 4'd0;

assign m_axi_dram_V_AWSIZE = 3'd0;

assign m_axi_dram_V_AWUSER = 1'd0;

assign m_axi_dram_V_RREADY = 1'b0;

assign m_axi_dram_V_WDATA = tmp_3_reg_1348;

assign m_axi_dram_V_WID = 1'd0;

assign m_axi_dram_V_WLAST = 1'b0;

assign m_axi_dram_V_WSTRB = 64'd18446744073709551615;

assign m_axi_dram_V_WUSER = 1'd0;

assign mruArray_V_d0 = {{{{{{{{val_assign_7_fu_1037_p2}, {val_assign_6_fu_1032_p2}}, {val_assign_5_fu_1027_p2}}, {val_assign_4_fu_1022_p2}}, {val_assign_3_fu_1017_p2}}, {val_assign_2_fu_1012_p2}}, {val_assign_1_fu_1007_p2}}, {val_assign_fu_1002_p2}};

assign p_3_fu_825_p3 = ((tmp_19_fu_817_p3[0:0] === 1'b1) ? 4'd8 : 4'd7);

always @ (*) begin
    p_Result_2_fu_988_p4 = tempMru_V_reg_1191;
    p_Result_2_fu_988_p4[Hi_assign_cast_reg_1251] = |(8'd1);
end

assign p_Result_s_fu_923_p3 = {{grp_fu_909_p10}, {indexReg_V_reg_1063}};

assign p_s_fu_893_p3 = ((tmp_18_fu_885_p3[0:0] === 1'b1) ? 4'd8 : 4'd7);

assign sext_cast_fu_955_p1 = dram_V_offset;

assign sum_cast_fu_964_p1 = sum_reg_1343;

assign sum_fu_958_p2 = (sext_cast_fu_955_p1 + tmp_9_cast_fu_930_p1);

assign tagArray_0_V_address0 = tmp_reg_1088;

assign tagArray_0_V_d0 = tagReg_V_reg_1076;

assign tagArray_1_V_address0 = tmp_reg_1088;

assign tagArray_1_V_d0 = tagReg_V_reg_1076;

assign tagArray_2_V_address0 = tmp_reg_1088;

assign tagArray_2_V_d0 = tagReg_V_reg_1076;

assign tagArray_3_V_address0 = tmp_reg_1088;

assign tagArray_3_V_d0 = tagReg_V_reg_1076;

assign tagArray_4_V_address0 = tmp_reg_1088;

assign tagArray_4_V_d0 = tagReg_V_reg_1076;

assign tagArray_5_V_address0 = tmp_reg_1088;

assign tagArray_5_V_d0 = tagReg_V_reg_1076;

assign tagArray_6_V_address0 = tmp_reg_1088;

assign tagArray_6_V_d0 = tagReg_V_reg_1076;

assign tagArray_7_V_address0 = tmp_reg_1088;

assign tagArray_7_V_d0 = tagReg_V_reg_1076;

integer ap_tvar_int_1;

always @ (i_addr_V) begin
    for (ap_tvar_int_1 = 24 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 8) begin
            tagReg_V_fu_744_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tagReg_V_fu_744_p4[ap_tvar_int_1] = i_addr_V[31 - ap_tvar_int_1];
        end
    end
end

assign tmp_10_fu_853_p3 = mruArray_V_q0[32'd3];

assign tmp_11_fu_785_p3 = valid_V[32'd3];

assign tmp_12_fu_861_p3 = mruArray_V_q0[32'd4];

assign tmp_13_fu_793_p3 = valid_V[32'd4];

assign tmp_14_fu_869_p3 = mruArray_V_q0[32'd5];

assign tmp_15_fu_801_p3 = valid_V[32'd5];

assign tmp_16_fu_877_p3 = mruArray_V_q0[32'd6];

assign tmp_17_fu_809_p3 = valid_V[32'd6];

assign tmp_18_fu_885_p3 = mruArray_V_q0[32'd7];

assign tmp_19_fu_817_p3 = valid_V[32'd7];

assign tmp_1_fu_759_p2 = ((valid_V == 8'd255) ? 1'b1 : 1'b0);

assign tmp_20_fu_905_p1 = Hi_assign_reg_619[2:0];

assign tmp_21_fu_974_p1 = Hi_assign_reg_619[2:0];

assign tmp_2_fu_833_p1 = mruArray_V_q0[0:0];

assign tmp_4_fu_765_p1 = valid_V[0:0];

assign tmp_5_fu_837_p3 = mruArray_V_q0[32'd1];

assign tmp_6_fu_996_p2 = ((p_Result_2_fu_988_p4 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_7_fu_769_p3 = valid_V[32'd1];

assign tmp_8_fu_845_p3 = mruArray_V_q0[32'd2];

assign tmp_9_cast_fu_930_p1 = p_Result_s_fu_923_p3;

assign tmp_9_fu_777_p3 = valid_V[32'd2];

assign tmp_fu_754_p1 = indexReg_V_fu_734_p4;

assign val_assign_1_fu_1007_p2 = ((indexReg_V_reg_1063 == 8'd1) ? 1'b1 : 1'b0);

assign val_assign_2_fu_1012_p2 = ((indexReg_V_reg_1063 == 8'd2) ? 1'b1 : 1'b0);

assign val_assign_3_fu_1017_p2 = ((indexReg_V_reg_1063 == 8'd3) ? 1'b1 : 1'b0);

assign val_assign_4_fu_1022_p2 = ((indexReg_V_reg_1063 == 8'd4) ? 1'b1 : 1'b0);

assign val_assign_5_fu_1027_p2 = ((indexReg_V_reg_1063 == 8'd5) ? 1'b1 : 1'b0);

assign val_assign_6_fu_1032_p2 = ((indexReg_V_reg_1063 == 8'd6) ? 1'b1 : 1'b0);

assign val_assign_7_fu_1037_p2 = ((indexReg_V_reg_1063 == 8'd7) ? 1'b1 : 1'b0);

assign val_assign_fu_1002_p2 = ((indexReg_V_reg_1063 == 8'd0) ? 1'b1 : 1'b0);

assign validArray_V_2_address0 = tmp_reg_1088;

always @ (*) begin
    validArray_V_2_d0 = tempValid_V_1_reg_572;
    validArray_V_2_d0[Hi_assign_cast_reg_1251] = |(8'd1);
end

always @ (posedge ap_clk) begin
    tmp_reg_1088[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    Hi_assign_cast_reg_1251[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //WriteMiss
